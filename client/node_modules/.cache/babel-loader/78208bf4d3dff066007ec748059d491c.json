{"ast":null,"code":"\"use strict\";\n\nvar Logger = require('./Logger');\n\nvar Utils = require('./Utils');\n\nvar Grammar = require('./Grammar');\n\nvar logger = new Logger('Socket');\n/**\n * Interface documentation: https://jssip.net/documentation/$last_version/api/socket/\n *\n * interface Socket {\n *  attribute String via_transport\n *  attribute String url\n *  attribute String sip_uri\n *\n *  method connect();\n *  method disconnect();\n *  method send(data);\n *\n *  attribute EventHandler onconnect\n *  attribute EventHandler ondisconnect\n *  attribute EventHandler ondata\n * }\n *\n */\n\nexports.isSocket = function (socket) {\n  // Ignore if an array is given.\n  if (Array.isArray(socket)) {\n    return false;\n  }\n\n  if (typeof socket === 'undefined') {\n    logger.warn('undefined JsSIP.Socket instance');\n    return false;\n  } // Check Properties.\n\n\n  try {\n    if (!Utils.isString(socket.url)) {\n      logger.warn('missing or invalid JsSIP.Socket url property');\n      throw new Error('Missing or invalid JsSIP.Socket url property');\n    }\n\n    if (!Utils.isString(socket.via_transport)) {\n      logger.warn('missing or invalid JsSIP.Socket via_transport property');\n      throw new Error('Missing or invalid JsSIP.Socket via_transport property');\n    }\n\n    if (Grammar.parse(socket.sip_uri, 'SIP_URI') === -1) {\n      logger.warn('missing or invalid JsSIP.Socket sip_uri property');\n      throw new Error('missing or invalid JsSIP.Socket sip_uri property');\n    }\n  } catch (e) {\n    return false;\n  } // Check Methods.\n\n\n  try {\n    ['connect', 'disconnect', 'send'].forEach(function (method) {\n      if (!Utils.isFunction(socket[method])) {\n        logger.warn(\"missing or invalid JsSIP.Socket method: \".concat(method));\n        throw new Error(\"Missing or invalid JsSIP.Socket method: \".concat(method));\n      }\n    });\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/Users/tuphan/Desktop/gcallstest/node_modules/jssip/lib-es5/Socket.js"],"names":["Logger","require","Utils","Grammar","logger","exports","isSocket","socket","Array","isArray","warn","isString","url","Error","via_transport","parse","sip_uri","e","forEach","method","isFunction","concat"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAAnB;;AAEA,IAAIE,OAAO,GAAGF,OAAO,CAAC,WAAD,CAArB;;AAEA,IAAIG,MAAM,GAAG,IAAIJ,MAAJ,CAAW,QAAX,CAAb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAK,OAAO,CAACC,QAAR,GAAmB,UAAUC,MAAV,EAAkB;AACnC;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AACzB,WAAO,KAAP;AACD;;AAED,MAAI,OAAOA,MAAP,KAAkB,WAAtB,EAAmC;AACjCH,IAAAA,MAAM,CAACM,IAAP,CAAY,iCAAZ;AACA,WAAO,KAAP;AACD,GATkC,CASjC;;;AAGF,MAAI;AACF,QAAI,CAACR,KAAK,CAACS,QAAN,CAAeJ,MAAM,CAACK,GAAtB,CAAL,EAAiC;AAC/BR,MAAAA,MAAM,CAACM,IAAP,CAAY,8CAAZ;AACA,YAAM,IAAIG,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,QAAI,CAACX,KAAK,CAACS,QAAN,CAAeJ,MAAM,CAACO,aAAtB,CAAL,EAA2C;AACzCV,MAAAA,MAAM,CAACM,IAAP,CAAY,wDAAZ;AACA,YAAM,IAAIG,KAAJ,CAAU,wDAAV,CAAN;AACD;;AAED,QAAIV,OAAO,CAACY,KAAR,CAAcR,MAAM,CAACS,OAArB,EAA8B,SAA9B,MAA6C,CAAC,CAAlD,EAAqD;AACnDZ,MAAAA,MAAM,CAACM,IAAP,CAAY,kDAAZ;AACA,YAAM,IAAIG,KAAJ,CAAU,kDAAV,CAAN;AACD;AACF,GAfD,CAeE,OAAOI,CAAP,EAAU;AACV,WAAO,KAAP;AACD,GA7BkC,CA6BjC;;;AAGF,MAAI;AACF,KAAC,SAAD,EAAY,YAAZ,EAA0B,MAA1B,EAAkCC,OAAlC,CAA0C,UAAUC,MAAV,EAAkB;AAC1D,UAAI,CAACjB,KAAK,CAACkB,UAAN,CAAiBb,MAAM,CAACY,MAAD,CAAvB,CAAL,EAAuC;AACrCf,QAAAA,MAAM,CAACM,IAAP,CAAY,2CAA2CW,MAA3C,CAAkDF,MAAlD,CAAZ;AACA,cAAM,IAAIN,KAAJ,CAAU,2CAA2CQ,MAA3C,CAAkDF,MAAlD,CAAV,CAAN;AACD;AACF,KALD;AAMD,GAPD,CAOE,OAAOF,CAAP,EAAU;AACV,WAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACD,CA5CD","sourcesContent":["\"use strict\";\n\nvar Logger = require('./Logger');\n\nvar Utils = require('./Utils');\n\nvar Grammar = require('./Grammar');\n\nvar logger = new Logger('Socket');\n/**\n * Interface documentation: https://jssip.net/documentation/$last_version/api/socket/\n *\n * interface Socket {\n *  attribute String via_transport\n *  attribute String url\n *  attribute String sip_uri\n *\n *  method connect();\n *  method disconnect();\n *  method send(data);\n *\n *  attribute EventHandler onconnect\n *  attribute EventHandler ondisconnect\n *  attribute EventHandler ondata\n * }\n *\n */\n\nexports.isSocket = function (socket) {\n  // Ignore if an array is given.\n  if (Array.isArray(socket)) {\n    return false;\n  }\n\n  if (typeof socket === 'undefined') {\n    logger.warn('undefined JsSIP.Socket instance');\n    return false;\n  } // Check Properties.\n\n\n  try {\n    if (!Utils.isString(socket.url)) {\n      logger.warn('missing or invalid JsSIP.Socket url property');\n      throw new Error('Missing or invalid JsSIP.Socket url property');\n    }\n\n    if (!Utils.isString(socket.via_transport)) {\n      logger.warn('missing or invalid JsSIP.Socket via_transport property');\n      throw new Error('Missing or invalid JsSIP.Socket via_transport property');\n    }\n\n    if (Grammar.parse(socket.sip_uri, 'SIP_URI') === -1) {\n      logger.warn('missing or invalid JsSIP.Socket sip_uri property');\n      throw new Error('missing or invalid JsSIP.Socket sip_uri property');\n    }\n  } catch (e) {\n    return false;\n  } // Check Methods.\n\n\n  try {\n    ['connect', 'disconnect', 'send'].forEach(function (method) {\n      if (!Utils.isFunction(socket[method])) {\n        logger.warn(\"missing or invalid JsSIP.Socket method: \".concat(method));\n        throw new Error(\"Missing or invalid JsSIP.Socket method: \".concat(method));\n      }\n    });\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n};"]},"metadata":{},"sourceType":"script"}