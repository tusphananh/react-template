{"ast":null,"code":"\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar Logger = require('./Logger');\n\nvar Utils = require('./Utils');\n\nvar JsSIP_C = require('./Constants');\n\nvar SIPMessage = require('./SIPMessage');\n\nvar RequestSender = require('./RequestSender');\n\nvar logger = new Logger('Registrator');\nvar MIN_REGISTER_EXPIRES = 10; // In seconds.\n\nmodule.exports = /*#__PURE__*/function () {\n  function Registrator(ua, transport) {\n    _classCallCheck(this, Registrator); // Force reg_id to 1.\n\n\n    this._reg_id = 1;\n    this._ua = ua;\n    this._transport = transport;\n    this._registrar = ua.configuration.registrar_server;\n    this._expires = ua.configuration.register_expires; // Call-ID and CSeq values RFC3261 10.2.\n\n    this._call_id = Utils.createRandomToken(22);\n    this._cseq = 0;\n    this._to_uri = ua.configuration.uri;\n    this._registrationTimer = null; // Ongoing Register request.\n\n    this._registering = false; // Set status.\n\n    this._registered = false; // Contact header.\n\n    this._contact = this._ua.contact.toString(); // Sip.ice media feature tag (RFC 5768).\n\n    this._contact += ';+sip.ice'; // Custom headers for REGISTER and un-REGISTER.\n\n    this._extraHeaders = []; // Custom Contact header params for REGISTER and un-REGISTER.\n\n    this._extraContactParams = ''; // Contents of the sip.instance Contact header parameter.\n\n    this._sipInstance = \"\\\"<urn:uuid:\".concat(this._ua.configuration.instance_id, \">\\\"\");\n    this._contact += \";reg-id=\".concat(this._reg_id);\n    this._contact += \";+sip.instance=\".concat(this._sipInstance);\n  }\n\n  _createClass(Registrator, [{\n    key: \"setExtraHeaders\",\n    value: function setExtraHeaders(extraHeaders) {\n      if (!Array.isArray(extraHeaders)) {\n        extraHeaders = [];\n      }\n\n      this._extraHeaders = extraHeaders.slice();\n    }\n  }, {\n    key: \"setExtraContactParams\",\n    value: function setExtraContactParams(extraContactParams) {\n      if (!(extraContactParams instanceof Object)) {\n        extraContactParams = {};\n      } // Reset it.\n\n\n      this._extraContactParams = '';\n\n      for (var param_key in extraContactParams) {\n        if (Object.prototype.hasOwnProperty.call(extraContactParams, param_key)) {\n          var param_value = extraContactParams[param_key];\n          this._extraContactParams += \";\".concat(param_key);\n\n          if (param_value) {\n            this._extraContactParams += \"=\".concat(param_value);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"register\",\n    value: function register() {\n      var _this = this;\n\n      if (this._registering) {\n        logger.debug('Register request in progress...');\n        return;\n      }\n\n      var extraHeaders = this._extraHeaders.slice();\n\n      extraHeaders.push(\"Contact: \".concat(this._contact, \";expires=\").concat(this._expires).concat(this._extraContactParams));\n      extraHeaders.push(\"Expires: \".concat(this._expires));\n      var request = new SIPMessage.OutgoingRequest(JsSIP_C.REGISTER, this._registrar, this._ua, {\n        'to_uri': this._to_uri,\n        'call_id': this._call_id,\n        'cseq': this._cseq += 1\n      }, extraHeaders);\n      var request_sender = new RequestSender(this._ua, request, {\n        onRequestTimeout: function onRequestTimeout() {\n          _this._registrationFailure(null, JsSIP_C.causes.REQUEST_TIMEOUT);\n        },\n        onTransportError: function onTransportError() {\n          _this._registrationFailure(null, JsSIP_C.causes.CONNECTION_ERROR);\n        },\n        // Increase the CSeq on authentication.\n        onAuthenticated: function onAuthenticated() {\n          _this._cseq += 1;\n        },\n        onReceiveResponse: function onReceiveResponse(response) {\n          // Discard responses to older REGISTER/un-REGISTER requests.\n          if (response.cseq !== _this._cseq) {\n            return;\n          } // Clear registration timer.\n\n\n          if (_this._registrationTimer !== null) {\n            clearTimeout(_this._registrationTimer);\n            _this._registrationTimer = null;\n          }\n\n          switch (true) {\n            case /^1[0-9]{2}$/.test(response.status_code):\n              {\n                // Ignore provisional responses.\n                break;\n              }\n\n            case /^2[0-9]{2}$/.test(response.status_code):\n              {\n                _this._registering = false;\n\n                if (!response.hasHeader('Contact')) {\n                  logger.debug('no Contact header in response to REGISTER, response ignored');\n                  break;\n                }\n\n                var contacts = response.headers['Contact'].reduce(function (a, b) {\n                  return a.concat(b.parsed);\n                }, []); // Get the Contact pointing to us and update the expires value accordingly.\n                // Try to find a matching Contact using sip.instance and reg-id.\n\n                var contact = contacts.find(function (element) {\n                  return _this._sipInstance === element.getParam('+sip.instance') && _this._reg_id === parseInt(element.getParam('reg-id'));\n                }); // If no match was found using the sip.instance try comparing the URIs.\n\n                if (!contact) {\n                  contact = contacts.find(function (element) {\n                    return element.uri.user === _this._ua.contact.uri.user;\n                  });\n                }\n\n                if (!contact) {\n                  logger.debug('no Contact header pointing to us, response ignored');\n                  break;\n                }\n\n                var expires = contact.getParam('expires');\n\n                if (!expires && response.hasHeader('expires')) {\n                  expires = response.getHeader('expires');\n                }\n\n                if (!expires) {\n                  expires = _this._expires;\n                }\n\n                expires = Number(expires);\n                if (expires < MIN_REGISTER_EXPIRES) expires = MIN_REGISTER_EXPIRES;\n                var timeout = expires > 64 ? expires * 1000 / 2 + Math.floor((expires / 2 - 32) * 1000 * Math.random()) : expires * 1000 - 5000; // Re-Register or emit an event before the expiration interval has elapsed.\n                // For that, decrease the expires value. ie: 3 seconds.\n\n                _this._registrationTimer = setTimeout(function () {\n                  _this._registrationTimer = null; // If there are no listeners for registrationExpiring, renew registration.\n                  // If there are listeners, let the function listening do the register call.\n\n                  if (_this._ua.listeners('registrationExpiring').length === 0) {\n                    _this.register();\n                  } else {\n                    _this._ua.emit('registrationExpiring');\n                  }\n                }, timeout); // Save gruu values.\n\n                if (contact.hasParam('temp-gruu')) {\n                  _this._ua.contact.temp_gruu = contact.getParam('temp-gruu').replace(/\"/g, '');\n                }\n\n                if (contact.hasParam('pub-gruu')) {\n                  _this._ua.contact.pub_gruu = contact.getParam('pub-gruu').replace(/\"/g, '');\n                }\n\n                if (!_this._registered) {\n                  _this._registered = true;\n\n                  _this._ua.registered({\n                    response: response\n                  });\n                }\n\n                break;\n              }\n            // Interval too brief RFC3261 10.2.8.\n\n            case /^423$/.test(response.status_code):\n              {\n                if (response.hasHeader('min-expires')) {\n                  // Increase our registration interval to the suggested minimum.\n                  _this._expires = Number(response.getHeader('min-expires'));\n                  if (_this._expires < MIN_REGISTER_EXPIRES) _this._expires = MIN_REGISTER_EXPIRES; // Attempt the registration again immediately.\n\n                  _this.register();\n                } else {\n                  // This response MUST contain a Min-Expires header field.\n                  logger.debug('423 response received for REGISTER without Min-Expires');\n\n                  _this._registrationFailure(response, JsSIP_C.causes.SIP_FAILURE_CODE);\n                }\n\n                break;\n              }\n\n            default:\n              {\n                var cause = Utils.sipErrorCause(response.status_code);\n\n                _this._registrationFailure(response, cause);\n              }\n          }\n        }\n      });\n      this._registering = true;\n      request_sender.send();\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister() {\n      var _this2 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!this._registered) {\n        logger.debug('already unregistered');\n        return;\n      }\n\n      this._registered = false; // Clear the registration timer.\n\n      if (this._registrationTimer !== null) {\n        clearTimeout(this._registrationTimer);\n        this._registrationTimer = null;\n      }\n\n      var extraHeaders = this._extraHeaders.slice();\n\n      if (options.all) {\n        extraHeaders.push(\"Contact: *\".concat(this._extraContactParams));\n      } else {\n        extraHeaders.push(\"Contact: \".concat(this._contact, \";expires=0\").concat(this._extraContactParams));\n      }\n\n      extraHeaders.push('Expires: 0');\n      var request = new SIPMessage.OutgoingRequest(JsSIP_C.REGISTER, this._registrar, this._ua, {\n        'to_uri': this._to_uri,\n        'call_id': this._call_id,\n        'cseq': this._cseq += 1\n      }, extraHeaders);\n      var request_sender = new RequestSender(this._ua, request, {\n        onRequestTimeout: function onRequestTimeout() {\n          _this2._unregistered(null, JsSIP_C.causes.REQUEST_TIMEOUT);\n        },\n        onTransportError: function onTransportError() {\n          _this2._unregistered(null, JsSIP_C.causes.CONNECTION_ERROR);\n        },\n        // Increase the CSeq on authentication.\n        onAuthenticated: function onAuthenticated() {\n          _this2._cseq += 1;\n        },\n        onReceiveResponse: function onReceiveResponse(response) {\n          switch (true) {\n            case /^1[0-9]{2}$/.test(response.status_code):\n              // Ignore provisional responses.\n              break;\n\n            case /^2[0-9]{2}$/.test(response.status_code):\n              _this2._unregistered(response);\n\n              break;\n\n            default:\n              {\n                var cause = Utils.sipErrorCause(response.status_code);\n\n                _this2._unregistered(response, cause);\n              }\n          }\n        }\n      });\n      request_sender.send();\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this._registered) {\n        this.unregister();\n      }\n    }\n  }, {\n    key: \"onTransportClosed\",\n    value: function onTransportClosed() {\n      this._registering = false;\n\n      if (this._registrationTimer !== null) {\n        clearTimeout(this._registrationTimer);\n        this._registrationTimer = null;\n      }\n\n      if (this._registered) {\n        this._registered = false;\n\n        this._ua.unregistered({});\n      }\n    }\n  }, {\n    key: \"_registrationFailure\",\n    value: function _registrationFailure(response, cause) {\n      this._registering = false;\n\n      this._ua.registrationFailed({\n        response: response || null,\n        cause: cause\n      });\n\n      if (this._registered) {\n        this._registered = false;\n\n        this._ua.unregistered({\n          response: response || null,\n          cause: cause\n        });\n      }\n    }\n  }, {\n    key: \"_unregistered\",\n    value: function _unregistered(response, cause) {\n      this._registering = false;\n      this._registered = false;\n\n      this._ua.unregistered({\n        response: response || null,\n        cause: cause || null\n      });\n    }\n  }, {\n    key: \"registered\",\n    get: function get() {\n      return this._registered;\n    }\n  }]);\n\n  return Registrator;\n}();","map":{"version":3,"sources":["/Users/tuphan/Desktop/ubuntuGcalls/client/node_modules/jssip/lib-es5/Registrator.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","Logger","require","Utils","JsSIP_C","SIPMessage","RequestSender","logger","MIN_REGISTER_EXPIRES","module","exports","Registrator","ua","transport","_reg_id","_ua","_transport","_registrar","configuration","registrar_server","_expires","register_expires","_call_id","createRandomToken","_cseq","_to_uri","uri","_registrationTimer","_registering","_registered","_contact","contact","toString","_extraHeaders","_extraContactParams","_sipInstance","concat","instance_id","value","setExtraHeaders","extraHeaders","Array","isArray","slice","setExtraContactParams","extraContactParams","param_key","hasOwnProperty","call","param_value","register","_this","debug","push","request","OutgoingRequest","REGISTER","request_sender","onRequestTimeout","_registrationFailure","causes","REQUEST_TIMEOUT","onTransportError","CONNECTION_ERROR","onAuthenticated","onReceiveResponse","response","cseq","clearTimeout","test","status_code","hasHeader","contacts","headers","reduce","a","b","parsed","find","element","getParam","parseInt","user","expires","getHeader","Number","timeout","Math","floor","random","setTimeout","listeners","emit","hasParam","temp_gruu","replace","pub_gruu","registered","SIP_FAILURE_CODE","cause","sipErrorCause","send","unregister","_this2","options","arguments","undefined","all","_unregistered","close","onTransportClosed","unregistered","registrationFailed","get"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Logger = require('./Logger');\n\nvar Utils = require('./Utils');\n\nvar JsSIP_C = require('./Constants');\n\nvar SIPMessage = require('./SIPMessage');\n\nvar RequestSender = require('./RequestSender');\n\nvar logger = new Logger('Registrator');\nvar MIN_REGISTER_EXPIRES = 10; // In seconds.\n\nmodule.exports = /*#__PURE__*/function () {\n  function Registrator(ua, transport) {\n    _classCallCheck(this, Registrator);\n\n    // Force reg_id to 1.\n    this._reg_id = 1;\n    this._ua = ua;\n    this._transport = transport;\n    this._registrar = ua.configuration.registrar_server;\n    this._expires = ua.configuration.register_expires; // Call-ID and CSeq values RFC3261 10.2.\n\n    this._call_id = Utils.createRandomToken(22);\n    this._cseq = 0;\n    this._to_uri = ua.configuration.uri;\n    this._registrationTimer = null; // Ongoing Register request.\n\n    this._registering = false; // Set status.\n\n    this._registered = false; // Contact header.\n\n    this._contact = this._ua.contact.toString(); // Sip.ice media feature tag (RFC 5768).\n\n    this._contact += ';+sip.ice'; // Custom headers for REGISTER and un-REGISTER.\n\n    this._extraHeaders = []; // Custom Contact header params for REGISTER and un-REGISTER.\n\n    this._extraContactParams = ''; // Contents of the sip.instance Contact header parameter.\n\n    this._sipInstance = \"\\\"<urn:uuid:\".concat(this._ua.configuration.instance_id, \">\\\"\");\n    this._contact += \";reg-id=\".concat(this._reg_id);\n    this._contact += \";+sip.instance=\".concat(this._sipInstance);\n  }\n\n  _createClass(Registrator, [{\n    key: \"setExtraHeaders\",\n    value: function setExtraHeaders(extraHeaders) {\n      if (!Array.isArray(extraHeaders)) {\n        extraHeaders = [];\n      }\n\n      this._extraHeaders = extraHeaders.slice();\n    }\n  }, {\n    key: \"setExtraContactParams\",\n    value: function setExtraContactParams(extraContactParams) {\n      if (!(extraContactParams instanceof Object)) {\n        extraContactParams = {};\n      } // Reset it.\n\n\n      this._extraContactParams = '';\n\n      for (var param_key in extraContactParams) {\n        if (Object.prototype.hasOwnProperty.call(extraContactParams, param_key)) {\n          var param_value = extraContactParams[param_key];\n          this._extraContactParams += \";\".concat(param_key);\n\n          if (param_value) {\n            this._extraContactParams += \"=\".concat(param_value);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"register\",\n    value: function register() {\n      var _this = this;\n\n      if (this._registering) {\n        logger.debug('Register request in progress...');\n        return;\n      }\n\n      var extraHeaders = this._extraHeaders.slice();\n\n      extraHeaders.push(\"Contact: \".concat(this._contact, \";expires=\").concat(this._expires).concat(this._extraContactParams));\n      extraHeaders.push(\"Expires: \".concat(this._expires));\n      var request = new SIPMessage.OutgoingRequest(JsSIP_C.REGISTER, this._registrar, this._ua, {\n        'to_uri': this._to_uri,\n        'call_id': this._call_id,\n        'cseq': this._cseq += 1\n      }, extraHeaders);\n      var request_sender = new RequestSender(this._ua, request, {\n        onRequestTimeout: function onRequestTimeout() {\n          _this._registrationFailure(null, JsSIP_C.causes.REQUEST_TIMEOUT);\n        },\n        onTransportError: function onTransportError() {\n          _this._registrationFailure(null, JsSIP_C.causes.CONNECTION_ERROR);\n        },\n        // Increase the CSeq on authentication.\n        onAuthenticated: function onAuthenticated() {\n          _this._cseq += 1;\n        },\n        onReceiveResponse: function onReceiveResponse(response) {\n          // Discard responses to older REGISTER/un-REGISTER requests.\n          if (response.cseq !== _this._cseq) {\n            return;\n          } // Clear registration timer.\n\n\n          if (_this._registrationTimer !== null) {\n            clearTimeout(_this._registrationTimer);\n            _this._registrationTimer = null;\n          }\n\n          switch (true) {\n            case /^1[0-9]{2}$/.test(response.status_code):\n              {\n                // Ignore provisional responses.\n                break;\n              }\n\n            case /^2[0-9]{2}$/.test(response.status_code):\n              {\n                _this._registering = false;\n\n                if (!response.hasHeader('Contact')) {\n                  logger.debug('no Contact header in response to REGISTER, response ignored');\n                  break;\n                }\n\n                var contacts = response.headers['Contact'].reduce(function (a, b) {\n                  return a.concat(b.parsed);\n                }, []); // Get the Contact pointing to us and update the expires value accordingly.\n                // Try to find a matching Contact using sip.instance and reg-id.\n\n                var contact = contacts.find(function (element) {\n                  return _this._sipInstance === element.getParam('+sip.instance') && _this._reg_id === parseInt(element.getParam('reg-id'));\n                }); // If no match was found using the sip.instance try comparing the URIs.\n\n                if (!contact) {\n                  contact = contacts.find(function (element) {\n                    return element.uri.user === _this._ua.contact.uri.user;\n                  });\n                }\n\n                if (!contact) {\n                  logger.debug('no Contact header pointing to us, response ignored');\n                  break;\n                }\n\n                var expires = contact.getParam('expires');\n\n                if (!expires && response.hasHeader('expires')) {\n                  expires = response.getHeader('expires');\n                }\n\n                if (!expires) {\n                  expires = _this._expires;\n                }\n\n                expires = Number(expires);\n                if (expires < MIN_REGISTER_EXPIRES) expires = MIN_REGISTER_EXPIRES;\n                var timeout = expires > 64 ? expires * 1000 / 2 + Math.floor((expires / 2 - 32) * 1000 * Math.random()) : expires * 1000 - 5000; // Re-Register or emit an event before the expiration interval has elapsed.\n                // For that, decrease the expires value. ie: 3 seconds.\n\n                _this._registrationTimer = setTimeout(function () {\n                  _this._registrationTimer = null; // If there are no listeners for registrationExpiring, renew registration.\n                  // If there are listeners, let the function listening do the register call.\n\n                  if (_this._ua.listeners('registrationExpiring').length === 0) {\n                    _this.register();\n                  } else {\n                    _this._ua.emit('registrationExpiring');\n                  }\n                }, timeout); // Save gruu values.\n\n                if (contact.hasParam('temp-gruu')) {\n                  _this._ua.contact.temp_gruu = contact.getParam('temp-gruu').replace(/\"/g, '');\n                }\n\n                if (contact.hasParam('pub-gruu')) {\n                  _this._ua.contact.pub_gruu = contact.getParam('pub-gruu').replace(/\"/g, '');\n                }\n\n                if (!_this._registered) {\n                  _this._registered = true;\n\n                  _this._ua.registered({\n                    response: response\n                  });\n                }\n\n                break;\n              }\n            // Interval too brief RFC3261 10.2.8.\n\n            case /^423$/.test(response.status_code):\n              {\n                if (response.hasHeader('min-expires')) {\n                  // Increase our registration interval to the suggested minimum.\n                  _this._expires = Number(response.getHeader('min-expires'));\n                  if (_this._expires < MIN_REGISTER_EXPIRES) _this._expires = MIN_REGISTER_EXPIRES; // Attempt the registration again immediately.\n\n                  _this.register();\n                } else {\n                  // This response MUST contain a Min-Expires header field.\n                  logger.debug('423 response received for REGISTER without Min-Expires');\n\n                  _this._registrationFailure(response, JsSIP_C.causes.SIP_FAILURE_CODE);\n                }\n\n                break;\n              }\n\n            default:\n              {\n                var cause = Utils.sipErrorCause(response.status_code);\n\n                _this._registrationFailure(response, cause);\n              }\n          }\n        }\n      });\n      this._registering = true;\n      request_sender.send();\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister() {\n      var _this2 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!this._registered) {\n        logger.debug('already unregistered');\n        return;\n      }\n\n      this._registered = false; // Clear the registration timer.\n\n      if (this._registrationTimer !== null) {\n        clearTimeout(this._registrationTimer);\n        this._registrationTimer = null;\n      }\n\n      var extraHeaders = this._extraHeaders.slice();\n\n      if (options.all) {\n        extraHeaders.push(\"Contact: *\".concat(this._extraContactParams));\n      } else {\n        extraHeaders.push(\"Contact: \".concat(this._contact, \";expires=0\").concat(this._extraContactParams));\n      }\n\n      extraHeaders.push('Expires: 0');\n      var request = new SIPMessage.OutgoingRequest(JsSIP_C.REGISTER, this._registrar, this._ua, {\n        'to_uri': this._to_uri,\n        'call_id': this._call_id,\n        'cseq': this._cseq += 1\n      }, extraHeaders);\n      var request_sender = new RequestSender(this._ua, request, {\n        onRequestTimeout: function onRequestTimeout() {\n          _this2._unregistered(null, JsSIP_C.causes.REQUEST_TIMEOUT);\n        },\n        onTransportError: function onTransportError() {\n          _this2._unregistered(null, JsSIP_C.causes.CONNECTION_ERROR);\n        },\n        // Increase the CSeq on authentication.\n        onAuthenticated: function onAuthenticated() {\n          _this2._cseq += 1;\n        },\n        onReceiveResponse: function onReceiveResponse(response) {\n          switch (true) {\n            case /^1[0-9]{2}$/.test(response.status_code):\n              // Ignore provisional responses.\n              break;\n\n            case /^2[0-9]{2}$/.test(response.status_code):\n              _this2._unregistered(response);\n\n              break;\n\n            default:\n              {\n                var cause = Utils.sipErrorCause(response.status_code);\n\n                _this2._unregistered(response, cause);\n              }\n          }\n        }\n      });\n      request_sender.send();\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this._registered) {\n        this.unregister();\n      }\n    }\n  }, {\n    key: \"onTransportClosed\",\n    value: function onTransportClosed() {\n      this._registering = false;\n\n      if (this._registrationTimer !== null) {\n        clearTimeout(this._registrationTimer);\n        this._registrationTimer = null;\n      }\n\n      if (this._registered) {\n        this._registered = false;\n\n        this._ua.unregistered({});\n      }\n    }\n  }, {\n    key: \"_registrationFailure\",\n    value: function _registrationFailure(response, cause) {\n      this._registering = false;\n\n      this._ua.registrationFailed({\n        response: response || null,\n        cause: cause\n      });\n\n      if (this._registered) {\n        this._registered = false;\n\n        this._ua.unregistered({\n          response: response || null,\n          cause: cause\n        });\n      }\n    }\n  }, {\n    key: \"_unregistered\",\n    value: function _unregistered(response, cause) {\n      this._registering = false;\n      this._registered = false;\n\n      this._ua.unregistered({\n        response: response || null,\n        cause: cause || null\n      });\n    }\n  }, {\n    key: \"registered\",\n    get: function get() {\n      return this._registered;\n    }\n  }]);\n\n  return Registrator;\n}();"]},"metadata":{},"sourceType":"script"}