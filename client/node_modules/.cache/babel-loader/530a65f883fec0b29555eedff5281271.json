{"ast":null,"code":"\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar Logger = require('./Logger');\n\nvar Utils = require('./Utils');\n\nvar logger = new Logger('DigestAuthentication');\n\nmodule.exports = /*#__PURE__*/function () {\n  function DigestAuthentication(credentials) {\n    _classCallCheck(this, DigestAuthentication);\n\n    this._credentials = credentials;\n    this._cnonce = null;\n    this._nc = 0;\n    this._ncHex = '00000000';\n    this._algorithm = null;\n    this._realm = null;\n    this._nonce = null;\n    this._opaque = null;\n    this._stale = null;\n    this._qop = null;\n    this._method = null;\n    this._uri = null;\n    this._ha1 = null;\n    this._response = null;\n  }\n\n  _createClass(DigestAuthentication, [{\n    key: \"get\",\n    value: function get(parameter) {\n      switch (parameter) {\n        case 'realm':\n          return this._realm;\n\n        case 'ha1':\n          return this._ha1;\n\n        default:\n          logger.warn('get() | cannot get \"%s\" parameter', parameter);\n          return undefined;\n      }\n    }\n    /**\n    * Performs Digest authentication given a SIP request and the challenge\n    * received in a response to that request.\n    * Returns true if auth was successfully generated, false otherwise.\n    */\n\n  }, {\n    key: \"authenticate\",\n    value: function authenticate(_ref, challenge)\n    /* test interface */\n    {\n      var method = _ref.method,\n          ruri = _ref.ruri,\n          body = _ref.body;\n      var cnonce = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      this._algorithm = challenge.algorithm;\n      this._realm = challenge.realm;\n      this._nonce = challenge.nonce;\n      this._opaque = challenge.opaque;\n      this._stale = challenge.stale;\n\n      if (this._algorithm) {\n        if (this._algorithm !== 'MD5') {\n          logger.warn('authenticate() | challenge with Digest algorithm different than \"MD5\", authentication aborted');\n          return false;\n        }\n      } else {\n        this._algorithm = 'MD5';\n      }\n\n      if (!this._nonce) {\n        logger.warn('authenticate() | challenge without Digest nonce, authentication aborted');\n        return false;\n      }\n\n      if (!this._realm) {\n        logger.warn('authenticate() | challenge without Digest realm, authentication aborted');\n        return false;\n      } // If no plain SIP password is provided.\n\n\n      if (!this._credentials.password) {\n        // If ha1 is not provided we cannot authenticate.\n        if (!this._credentials.ha1) {\n          logger.warn('authenticate() | no plain SIP password nor ha1 provided, authentication aborted');\n          return false;\n        } // If the realm does not match the stored realm we cannot authenticate.\n\n\n        if (this._credentials.realm !== this._realm) {\n          logger.warn('authenticate() | no plain SIP password, and stored `realm` does not match the given `realm`, cannot authenticate [stored:\"%s\", given:\"%s\"]', this._credentials.realm, this._realm);\n          return false;\n        }\n      } // 'qop' can contain a list of values (Array). Let's choose just one.\n\n\n      if (challenge.qop) {\n        if (challenge.qop.indexOf('auth-int') > -1) {\n          this._qop = 'auth-int';\n        } else if (challenge.qop.indexOf('auth') > -1) {\n          this._qop = 'auth';\n        } else {\n          // Otherwise 'qop' is present but does not contain 'auth' or 'auth-int', so abort here.\n          logger.warn('authenticate() | challenge without Digest qop different than \"auth\" or \"auth-int\", authentication aborted');\n          return false;\n        }\n      } else {\n        this._qop = null;\n      } // Fill other attributes.\n\n\n      this._method = method;\n      this._uri = ruri;\n      this._cnonce = cnonce || Utils.createRandomToken(12);\n      this._nc += 1;\n      var hex = Number(this._nc).toString(16);\n      this._ncHex = '00000000'.substr(0, 8 - hex.length) + hex; // Nc-value = 8LHEX. Max value = 'FFFFFFFF'.\n\n      if (this._nc === 4294967296) {\n        this._nc = 1;\n        this._ncHex = '00000001';\n      } // Calculate the Digest \"response\" value.\n      // If we have plain SIP password then regenerate ha1.\n\n\n      if (this._credentials.password) {\n        // HA1 = MD5(A1) = MD5(username:realm:password).\n        this._ha1 = Utils.calculateMD5(\"\".concat(this._credentials.username, \":\").concat(this._realm, \":\").concat(this._credentials.password));\n      } // Otherwise reuse the stored ha1.\n      else {\n          this._ha1 = this._credentials.ha1;\n        }\n\n      var a2;\n      var ha2;\n\n      if (this._qop === 'auth') {\n        // HA2 = MD5(A2) = MD5(method:digestURI).\n        a2 = \"\".concat(this._method, \":\").concat(this._uri);\n        ha2 = Utils.calculateMD5(a2);\n        logger.debug('authenticate() | using qop=auth [a2:\"%s\"]', a2); // Response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2).\n\n        this._response = Utils.calculateMD5(\"\".concat(this._ha1, \":\").concat(this._nonce, \":\").concat(this._ncHex, \":\").concat(this._cnonce, \":auth:\").concat(ha2));\n      } else if (this._qop === 'auth-int') {\n        // HA2 = MD5(A2) = MD5(method:digestURI:MD5(entityBody)).\n        a2 = \"\".concat(this._method, \":\").concat(this._uri, \":\").concat(Utils.calculateMD5(body ? body : ''));\n        ha2 = Utils.calculateMD5(a2);\n        logger.debug('authenticate() | using qop=auth-int [a2:\"%s\"]', a2); // Response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2).\n\n        this._response = Utils.calculateMD5(\"\".concat(this._ha1, \":\").concat(this._nonce, \":\").concat(this._ncHex, \":\").concat(this._cnonce, \":auth-int:\").concat(ha2));\n      } else if (this._qop === null) {\n        // HA2 = MD5(A2) = MD5(method:digestURI).\n        a2 = \"\".concat(this._method, \":\").concat(this._uri);\n        ha2 = Utils.calculateMD5(a2);\n        logger.debug('authenticate() | using qop=null [a2:\"%s\"]', a2); // Response = MD5(HA1:nonce:HA2).\n\n        this._response = Utils.calculateMD5(\"\".concat(this._ha1, \":\").concat(this._nonce, \":\").concat(ha2));\n      }\n\n      logger.debug('authenticate() | response generated');\n      return true;\n    }\n    /**\n    * Return the Proxy-Authorization or WWW-Authorization header value.\n    */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var auth_params = [];\n\n      if (!this._response) {\n        throw new Error('response field does not exist, cannot generate Authorization header');\n      }\n\n      auth_params.push(\"algorithm=\".concat(this._algorithm));\n      auth_params.push(\"username=\\\"\".concat(this._credentials.username, \"\\\"\"));\n      auth_params.push(\"realm=\\\"\".concat(this._realm, \"\\\"\"));\n      auth_params.push(\"nonce=\\\"\".concat(this._nonce, \"\\\"\"));\n      auth_params.push(\"uri=\\\"\".concat(this._uri, \"\\\"\"));\n      auth_params.push(\"response=\\\"\".concat(this._response, \"\\\"\"));\n\n      if (this._opaque) {\n        auth_params.push(\"opaque=\\\"\".concat(this._opaque, \"\\\"\"));\n      }\n\n      if (this._qop) {\n        auth_params.push(\"qop=\".concat(this._qop));\n        auth_params.push(\"cnonce=\\\"\".concat(this._cnonce, \"\\\"\"));\n        auth_params.push(\"nc=\".concat(this._ncHex));\n      }\n\n      return \"Digest \".concat(auth_params.join(', '));\n    }\n  }]);\n\n  return DigestAuthentication;\n}();","map":{"version":3,"sources":["/Users/tuphan/Desktop/gcallstest/node_modules/jssip/lib-es5/DigestAuthentication.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","Logger","require","Utils","logger","module","exports","DigestAuthentication","credentials","_credentials","_cnonce","_nc","_ncHex","_algorithm","_realm","_nonce","_opaque","_stale","_qop","_method","_uri","_ha1","_response","value","get","parameter","warn","undefined","authenticate","_ref","challenge","method","ruri","body","cnonce","arguments","algorithm","realm","nonce","opaque","stale","password","ha1","qop","indexOf","createRandomToken","hex","Number","toString","substr","calculateMD5","concat","username","a2","ha2","debug","auth_params","Error","push","join"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Logger = require('./Logger');\n\nvar Utils = require('./Utils');\n\nvar logger = new Logger('DigestAuthentication');\n\nmodule.exports = /*#__PURE__*/function () {\n  function DigestAuthentication(credentials) {\n    _classCallCheck(this, DigestAuthentication);\n\n    this._credentials = credentials;\n    this._cnonce = null;\n    this._nc = 0;\n    this._ncHex = '00000000';\n    this._algorithm = null;\n    this._realm = null;\n    this._nonce = null;\n    this._opaque = null;\n    this._stale = null;\n    this._qop = null;\n    this._method = null;\n    this._uri = null;\n    this._ha1 = null;\n    this._response = null;\n  }\n\n  _createClass(DigestAuthentication, [{\n    key: \"get\",\n    value: function get(parameter) {\n      switch (parameter) {\n        case 'realm':\n          return this._realm;\n\n        case 'ha1':\n          return this._ha1;\n\n        default:\n          logger.warn('get() | cannot get \"%s\" parameter', parameter);\n          return undefined;\n      }\n    }\n    /**\n    * Performs Digest authentication given a SIP request and the challenge\n    * received in a response to that request.\n    * Returns true if auth was successfully generated, false otherwise.\n    */\n\n  }, {\n    key: \"authenticate\",\n    value: function authenticate(_ref, challenge)\n    /* test interface */\n    {\n      var method = _ref.method,\n          ruri = _ref.ruri,\n          body = _ref.body;\n      var cnonce = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      this._algorithm = challenge.algorithm;\n      this._realm = challenge.realm;\n      this._nonce = challenge.nonce;\n      this._opaque = challenge.opaque;\n      this._stale = challenge.stale;\n\n      if (this._algorithm) {\n        if (this._algorithm !== 'MD5') {\n          logger.warn('authenticate() | challenge with Digest algorithm different than \"MD5\", authentication aborted');\n          return false;\n        }\n      } else {\n        this._algorithm = 'MD5';\n      }\n\n      if (!this._nonce) {\n        logger.warn('authenticate() | challenge without Digest nonce, authentication aborted');\n        return false;\n      }\n\n      if (!this._realm) {\n        logger.warn('authenticate() | challenge without Digest realm, authentication aborted');\n        return false;\n      } // If no plain SIP password is provided.\n\n\n      if (!this._credentials.password) {\n        // If ha1 is not provided we cannot authenticate.\n        if (!this._credentials.ha1) {\n          logger.warn('authenticate() | no plain SIP password nor ha1 provided, authentication aborted');\n          return false;\n        } // If the realm does not match the stored realm we cannot authenticate.\n\n\n        if (this._credentials.realm !== this._realm) {\n          logger.warn('authenticate() | no plain SIP password, and stored `realm` does not match the given `realm`, cannot authenticate [stored:\"%s\", given:\"%s\"]', this._credentials.realm, this._realm);\n          return false;\n        }\n      } // 'qop' can contain a list of values (Array). Let's choose just one.\n\n\n      if (challenge.qop) {\n        if (challenge.qop.indexOf('auth-int') > -1) {\n          this._qop = 'auth-int';\n        } else if (challenge.qop.indexOf('auth') > -1) {\n          this._qop = 'auth';\n        } else {\n          // Otherwise 'qop' is present but does not contain 'auth' or 'auth-int', so abort here.\n          logger.warn('authenticate() | challenge without Digest qop different than \"auth\" or \"auth-int\", authentication aborted');\n          return false;\n        }\n      } else {\n        this._qop = null;\n      } // Fill other attributes.\n\n\n      this._method = method;\n      this._uri = ruri;\n      this._cnonce = cnonce || Utils.createRandomToken(12);\n      this._nc += 1;\n      var hex = Number(this._nc).toString(16);\n      this._ncHex = '00000000'.substr(0, 8 - hex.length) + hex; // Nc-value = 8LHEX. Max value = 'FFFFFFFF'.\n\n      if (this._nc === 4294967296) {\n        this._nc = 1;\n        this._ncHex = '00000001';\n      } // Calculate the Digest \"response\" value.\n      // If we have plain SIP password then regenerate ha1.\n\n\n      if (this._credentials.password) {\n        // HA1 = MD5(A1) = MD5(username:realm:password).\n        this._ha1 = Utils.calculateMD5(\"\".concat(this._credentials.username, \":\").concat(this._realm, \":\").concat(this._credentials.password));\n      } // Otherwise reuse the stored ha1.\n      else {\n          this._ha1 = this._credentials.ha1;\n        }\n\n      var a2;\n      var ha2;\n\n      if (this._qop === 'auth') {\n        // HA2 = MD5(A2) = MD5(method:digestURI).\n        a2 = \"\".concat(this._method, \":\").concat(this._uri);\n        ha2 = Utils.calculateMD5(a2);\n        logger.debug('authenticate() | using qop=auth [a2:\"%s\"]', a2); // Response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2).\n\n        this._response = Utils.calculateMD5(\"\".concat(this._ha1, \":\").concat(this._nonce, \":\").concat(this._ncHex, \":\").concat(this._cnonce, \":auth:\").concat(ha2));\n      } else if (this._qop === 'auth-int') {\n        // HA2 = MD5(A2) = MD5(method:digestURI:MD5(entityBody)).\n        a2 = \"\".concat(this._method, \":\").concat(this._uri, \":\").concat(Utils.calculateMD5(body ? body : ''));\n        ha2 = Utils.calculateMD5(a2);\n        logger.debug('authenticate() | using qop=auth-int [a2:\"%s\"]', a2); // Response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2).\n\n        this._response = Utils.calculateMD5(\"\".concat(this._ha1, \":\").concat(this._nonce, \":\").concat(this._ncHex, \":\").concat(this._cnonce, \":auth-int:\").concat(ha2));\n      } else if (this._qop === null) {\n        // HA2 = MD5(A2) = MD5(method:digestURI).\n        a2 = \"\".concat(this._method, \":\").concat(this._uri);\n        ha2 = Utils.calculateMD5(a2);\n        logger.debug('authenticate() | using qop=null [a2:\"%s\"]', a2); // Response = MD5(HA1:nonce:HA2).\n\n        this._response = Utils.calculateMD5(\"\".concat(this._ha1, \":\").concat(this._nonce, \":\").concat(ha2));\n      }\n\n      logger.debug('authenticate() | response generated');\n      return true;\n    }\n    /**\n    * Return the Proxy-Authorization or WWW-Authorization header value.\n    */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var auth_params = [];\n\n      if (!this._response) {\n        throw new Error('response field does not exist, cannot generate Authorization header');\n      }\n\n      auth_params.push(\"algorithm=\".concat(this._algorithm));\n      auth_params.push(\"username=\\\"\".concat(this._credentials.username, \"\\\"\"));\n      auth_params.push(\"realm=\\\"\".concat(this._realm, \"\\\"\"));\n      auth_params.push(\"nonce=\\\"\".concat(this._nonce, \"\\\"\"));\n      auth_params.push(\"uri=\\\"\".concat(this._uri, \"\\\"\"));\n      auth_params.push(\"response=\\\"\".concat(this._response, \"\\\"\"));\n\n      if (this._opaque) {\n        auth_params.push(\"opaque=\\\"\".concat(this._opaque, \"\\\"\"));\n      }\n\n      if (this._qop) {\n        auth_params.push(\"qop=\".concat(this._qop));\n        auth_params.push(\"cnonce=\\\"\".concat(this._cnonce, \"\\\"\"));\n        auth_params.push(\"nc=\".concat(this._ncHex));\n      }\n\n      return \"Digest \".concat(auth_params.join(', '));\n    }\n  }]);\n\n  return DigestAuthentication;\n}();"]},"metadata":{},"sourceType":"script"}