{"ast":null,"code":"\"use strict\";\n\nvar Logger = require('./Logger');\n\nvar Utils = require('./Utils');\n\nvar Grammar = require('./Grammar');\n\nvar logger = new Logger('Socket');\n/**\n * Interface documentation: https://jssip.net/documentation/$last_version/api/socket/\n *\n * interface Socket {\n *  attribute String via_transport\n *  attribute String url\n *  attribute String sip_uri\n *\n *  method connect();\n *  method disconnect();\n *  method send(data);\n *\n *  attribute EventHandler onconnect\n *  attribute EventHandler ondisconnect\n *  attribute EventHandler ondata\n * }\n *\n */\n\nexports.isSocket = function (socket) {\n  // Ignore if an array is given.\n  if (Array.isArray(socket)) {\n    return false;\n  }\n\n  if (typeof socket === 'undefined') {\n    logger.warn('undefined JsSIP.Socket instance');\n    return false;\n  } // Check Properties.\n\n\n  try {\n    if (!Utils.isString(socket.url)) {\n      logger.warn('missing or invalid JsSIP.Socket url property');\n      throw new Error('Missing or invalid JsSIP.Socket url property');\n    }\n\n    if (!Utils.isString(socket.via_transport)) {\n      logger.warn('missing or invalid JsSIP.Socket via_transport property');\n      throw new Error('Missing or invalid JsSIP.Socket via_transport property');\n    }\n\n    if (Grammar.parse(socket.sip_uri, 'SIP_URI') === -1) {\n      logger.warn('missing or invalid JsSIP.Socket sip_uri property');\n      throw new Error('missing or invalid JsSIP.Socket sip_uri property');\n    }\n  } catch (e) {\n    return false;\n  } // Check Methods.\n\n\n  try {\n    ['connect', 'disconnect', 'send'].forEach(function (method) {\n      if (!Utils.isFunction(socket[method])) {\n        logger.warn(\"missing or invalid JsSIP.Socket method: \".concat(method));\n        throw new Error(\"Missing or invalid JsSIP.Socket method: \".concat(method));\n      }\n    });\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n};","map":null,"metadata":{},"sourceType":"script"}