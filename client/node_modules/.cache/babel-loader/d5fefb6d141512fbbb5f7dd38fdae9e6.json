{"ast":null,"code":"\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar Logger = require('../Logger');\n\nvar JsSIP_C = require('../Constants');\n\nvar logger = new Logger('RTCSession:ReferNotifier');\nvar C = {\n  event_type: 'refer',\n  body_type: 'message/sipfrag;version=2.0',\n  expires: 300\n};\n\nmodule.exports = /*#__PURE__*/function () {\n  function ReferNotifier(session, id, expires) {\n    _classCallCheck(this, ReferNotifier);\n\n    this._session = session;\n    this._id = id;\n    this._expires = expires || C.expires;\n    this._active = true; // The creation of a Notifier results in an immediate NOTIFY.\n\n    this.notify(100);\n  }\n\n  _createClass(ReferNotifier, [{\n    key: \"notify\",\n    value: function notify(code, reason) {\n      logger.debug('notify()');\n\n      if (this._active === false) {\n        return;\n      }\n\n      reason = reason || JsSIP_C.REASON_PHRASE[code] || '';\n      var state;\n\n      if (code >= 200) {\n        state = 'terminated;reason=noresource';\n      } else {\n        state = \"active;expires=\".concat(this._expires);\n      } // Put this in a try/catch block.\n\n\n      this._session.sendRequest(JsSIP_C.NOTIFY, {\n        extraHeaders: [\"Event: \".concat(C.event_type, \";id=\").concat(this._id), \"Subscription-State: \".concat(state), \"Content-Type: \".concat(C.body_type)],\n        body: \"SIP/2.0 \".concat(code, \" \").concat(reason),\n        eventHandlers: {\n          // If a negative response is received, subscription is canceled.\n          onErrorResponse: function onErrorResponse() {\n            this._active = false;\n          }\n        }\n      });\n    }\n  }]);\n\n  return ReferNotifier;\n}();","map":{"version":3,"sources":["/Users/tuphan/Desktop/gcallstest/node_modules/jssip/lib-es5/RTCSession/ReferNotifier.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","Logger","require","JsSIP_C","logger","C","event_type","body_type","expires","module","exports","ReferNotifier","session","id","_session","_id","_expires","_active","notify","value","code","reason","debug","REASON_PHRASE","state","concat","sendRequest","NOTIFY","extraHeaders","body","eventHandlers","onErrorResponse"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Logger = require('../Logger');\n\nvar JsSIP_C = require('../Constants');\n\nvar logger = new Logger('RTCSession:ReferNotifier');\nvar C = {\n  event_type: 'refer',\n  body_type: 'message/sipfrag;version=2.0',\n  expires: 300\n};\n\nmodule.exports = /*#__PURE__*/function () {\n  function ReferNotifier(session, id, expires) {\n    _classCallCheck(this, ReferNotifier);\n\n    this._session = session;\n    this._id = id;\n    this._expires = expires || C.expires;\n    this._active = true; // The creation of a Notifier results in an immediate NOTIFY.\n\n    this.notify(100);\n  }\n\n  _createClass(ReferNotifier, [{\n    key: \"notify\",\n    value: function notify(code, reason) {\n      logger.debug('notify()');\n\n      if (this._active === false) {\n        return;\n      }\n\n      reason = reason || JsSIP_C.REASON_PHRASE[code] || '';\n      var state;\n\n      if (code >= 200) {\n        state = 'terminated;reason=noresource';\n      } else {\n        state = \"active;expires=\".concat(this._expires);\n      } // Put this in a try/catch block.\n\n\n      this._session.sendRequest(JsSIP_C.NOTIFY, {\n        extraHeaders: [\"Event: \".concat(C.event_type, \";id=\").concat(this._id), \"Subscription-State: \".concat(state), \"Content-Type: \".concat(C.body_type)],\n        body: \"SIP/2.0 \".concat(code, \" \").concat(reason),\n        eventHandlers: {\n          // If a negative response is received, subscription is canceled.\n          onErrorResponse: function onErrorResponse() {\n            this._active = false;\n          }\n        }\n      });\n    }\n  }]);\n\n  return ReferNotifier;\n}();"]},"metadata":{},"sourceType":"script"}