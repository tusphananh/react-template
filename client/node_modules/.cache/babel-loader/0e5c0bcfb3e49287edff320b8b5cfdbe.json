{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar sdp_transform = require('sdp-transform');\n\nvar Logger = require('./Logger');\n\nvar JsSIP_C = require('./Constants');\n\nvar Utils = require('./Utils');\n\nvar NameAddrHeader = require('./NameAddrHeader');\n\nvar Grammar = require('./Grammar');\n\nvar logger = new Logger('SIPMessage');\n/**\n * -param {String} method request method\n * -param {String} ruri request uri\n * -param {UA} ua\n * -param {Object} params parameters that will have priority over ua.configuration parameters:\n * <br>\n *  - cseq, call_id, from_tag, from_uri, from_display_name, to_uri, to_tag, route_set\n * -param {Object} [headers] extra headers\n * -param {String} [body]\n */\n\nvar OutgoingRequest = /*#__PURE__*/function () {\n  function OutgoingRequest(method, ruri, ua, params, extraHeaders, body) {\n    _classCallCheck(this, OutgoingRequest); // Mandatory parameters check.\n\n\n    if (!method || !ruri || !ua) {\n      return null;\n    }\n\n    params = params || {};\n    this.ua = ua;\n    this.headers = {};\n    this.method = method;\n    this.ruri = ruri;\n    this.body = body;\n    this.extraHeaders = Utils.cloneArray(extraHeaders); // Fill the Common SIP Request Headers.\n    // Route.\n\n    if (params.route_set) {\n      this.setHeader('route', params.route_set);\n    } else if (ua.configuration.use_preloaded_route) {\n      this.setHeader('route', \"<\".concat(ua.transport.sip_uri, \";lr>\"));\n    } // Via.\n    // Empty Via header. Will be filled by the client transaction.\n\n\n    this.setHeader('via', ''); // Max-Forwards.\n\n    this.setHeader('max-forwards', JsSIP_C.MAX_FORWARDS); // To\n\n    var to_uri = params.to_uri || ruri;\n    var to_params = params.to_tag ? {\n      tag: params.to_tag\n    } : null;\n    var to_display_name = typeof params.to_display_name !== 'undefined' ? params.to_display_name : null;\n    this.to = new NameAddrHeader(to_uri, to_display_name, to_params);\n    this.setHeader('to', this.to.toString()); // From.\n\n    var from_uri = params.from_uri || ua.configuration.uri;\n    var from_params = {\n      tag: params.from_tag || Utils.newTag()\n    };\n    var display_name;\n\n    if (typeof params.from_display_name !== 'undefined') {\n      display_name = params.from_display_name;\n    } else if (ua.configuration.display_name) {\n      display_name = ua.configuration.display_name;\n    } else {\n      display_name = null;\n    }\n\n    this.from = new NameAddrHeader(from_uri, display_name, from_params);\n    this.setHeader('from', this.from.toString()); // Call-ID.\n\n    var call_id = params.call_id || ua.configuration.jssip_id + Utils.createRandomToken(15);\n    this.call_id = call_id;\n    this.setHeader('call-id', call_id); // CSeq.\n\n    var cseq = params.cseq || Math.floor(Math.random() * 10000);\n    this.cseq = cseq;\n    this.setHeader('cseq', \"\".concat(cseq, \" \").concat(method));\n  }\n  /**\n   * Replace the the given header by the given value.\n   * -param {String} name header name\n   * -param {String | Array} value header value\n   */\n\n\n  _createClass(OutgoingRequest, [{\n    key: \"setHeader\",\n    value: function setHeader(name, value) {\n      // Remove the header from extraHeaders if present.\n      var regexp = new RegExp(\"^\\\\s*\".concat(name, \"\\\\s*:\"), 'i');\n\n      for (var idx = 0; idx < this.extraHeaders.length; idx++) {\n        if (regexp.test(this.extraHeaders[idx])) {\n          this.extraHeaders.splice(idx, 1);\n        }\n      }\n\n      this.headers[Utils.headerize(name)] = Array.isArray(value) ? value : [value];\n    }\n    /**\n     * Get the value of the given header name at the given position.\n     * -param {String} name header name\n     * -returns {String|undefined} Returns the specified header, null if header doesn't exist.\n     */\n\n  }, {\n    key: \"getHeader\",\n    value: function getHeader(name) {\n      var headers = this.headers[Utils.headerize(name)];\n\n      if (headers) {\n        if (headers[0]) {\n          return headers[0];\n        }\n      } else {\n        var regexp = new RegExp(\"^\\\\s*\".concat(name, \"\\\\s*:\"), 'i');\n\n        var _iterator = _createForOfIteratorHelper(this.extraHeaders),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var header = _step.value;\n\n            if (regexp.test(header)) {\n              return header.substring(header.indexOf(':') + 1).trim();\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      return;\n    }\n    /**\n     * Get the header/s of the given name.\n     * -param {String} name header name\n     * -returns {Array} Array with all the headers of the specified name.\n     */\n\n  }, {\n    key: \"getHeaders\",\n    value: function getHeaders(name) {\n      var headers = this.headers[Utils.headerize(name)];\n      var result = [];\n\n      if (headers) {\n        var _iterator2 = _createForOfIteratorHelper(headers),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var header = _step2.value;\n            result.push(header);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        return result;\n      } else {\n        var regexp = new RegExp(\"^\\\\s*\".concat(name, \"\\\\s*:\"), 'i');\n\n        var _iterator3 = _createForOfIteratorHelper(this.extraHeaders),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _header = _step3.value;\n\n            if (regexp.test(_header)) {\n              result.push(_header.substring(_header.indexOf(':') + 1).trim());\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        return result;\n      }\n    }\n    /**\n     * Verify the existence of the given header.\n     * -param {String} name header name\n     * -returns {boolean} true if header with given name exists, false otherwise\n     */\n\n  }, {\n    key: \"hasHeader\",\n    value: function hasHeader(name) {\n      if (this.headers[Utils.headerize(name)]) {\n        return true;\n      } else {\n        var regexp = new RegExp(\"^\\\\s*\".concat(name, \"\\\\s*:\"), 'i');\n\n        var _iterator4 = _createForOfIteratorHelper(this.extraHeaders),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var header = _step4.value;\n\n            if (regexp.test(header)) {\n              return true;\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Parse the current body as a SDP and store the resulting object\n     * into this.sdp.\n     * -param {Boolean} force: Parse even if this.sdp already exists.\n     *\n     * Returns this.sdp.\n     */\n\n  }, {\n    key: \"parseSDP\",\n    value: function parseSDP(force) {\n      if (!force && this.sdp) {\n        return this.sdp;\n      } else {\n        this.sdp = sdp_transform.parse(this.body || '');\n        return this.sdp;\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var msg = \"\".concat(this.method, \" \").concat(this.ruri, \" SIP/2.0\\r\\n\");\n\n      for (var headerName in this.headers) {\n        if (Object.prototype.hasOwnProperty.call(this.headers, headerName)) {\n          var _iterator5 = _createForOfIteratorHelper(this.headers[headerName]),\n              _step5;\n\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var headerValue = _step5.value;\n              msg += \"\".concat(headerName, \": \").concat(headerValue, \"\\r\\n\");\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n        }\n      }\n\n      var _iterator6 = _createForOfIteratorHelper(this.extraHeaders),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var header = _step6.value;\n          msg += \"\".concat(header.trim(), \"\\r\\n\");\n        } // Supported.\n\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var supported = [];\n\n      switch (this.method) {\n        case JsSIP_C.REGISTER:\n          supported.push('path', 'gruu');\n          break;\n\n        case JsSIP_C.INVITE:\n          if (this.ua.configuration.session_timers) {\n            supported.push('timer');\n          }\n\n          if (this.ua.contact.pub_gruu || this.ua.contact.temp_gruu) {\n            supported.push('gruu');\n          }\n\n          supported.push('ice', 'replaces');\n          break;\n\n        case JsSIP_C.UPDATE:\n          if (this.ua.configuration.session_timers) {\n            supported.push('timer');\n          }\n\n          supported.push('ice');\n          break;\n      }\n\n      supported.push('outbound');\n      var userAgent = this.ua.configuration.user_agent || JsSIP_C.USER_AGENT; // Allow.\n\n      msg += \"Allow: \".concat(JsSIP_C.ALLOWED_METHODS, \"\\r\\n\");\n      msg += \"Supported: \".concat(supported, \"\\r\\n\");\n      msg += \"User-Agent: \".concat(userAgent, \"\\r\\n\");\n\n      if (this.body) {\n        var length = Utils.str_utf8_length(this.body);\n        msg += \"Content-Length: \".concat(length, \"\\r\\n\\r\\n\");\n        msg += this.body;\n      } else {\n        msg += 'Content-Length: 0\\r\\n\\r\\n';\n      }\n\n      return msg;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var request = new OutgoingRequest(this.method, this.ruri, this.ua);\n      Object.keys(this.headers).forEach(function (name) {\n        request.headers[name] = this.headers[name].slice();\n      }, this);\n      request.body = this.body;\n      request.extraHeaders = Utils.cloneArray(this.extraHeaders);\n      request.to = this.to;\n      request.from = this.from;\n      request.call_id = this.call_id;\n      request.cseq = this.cseq;\n      return request;\n    }\n  }]);\n\n  return OutgoingRequest;\n}();\n\nvar InitialOutgoingInviteRequest = /*#__PURE__*/function (_OutgoingRequest) {\n  _inherits(InitialOutgoingInviteRequest, _OutgoingRequest);\n\n  var _super = _createSuper(InitialOutgoingInviteRequest);\n\n  function InitialOutgoingInviteRequest(ruri, ua, params, extraHeaders, body) {\n    var _this;\n\n    _classCallCheck(this, InitialOutgoingInviteRequest);\n\n    _this = _super.call(this, JsSIP_C.INVITE, ruri, ua, params, extraHeaders, body);\n    _this.transaction = null;\n    return _this;\n  }\n\n  _createClass(InitialOutgoingInviteRequest, [{\n    key: \"cancel\",\n    value: function cancel(reason) {\n      this.transaction.cancel(reason);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var request = new InitialOutgoingInviteRequest(this.ruri, this.ua);\n      Object.keys(this.headers).forEach(function (name) {\n        request.headers[name] = this.headers[name].slice();\n      }, this);\n      request.body = this.body;\n      request.extraHeaders = Utils.cloneArray(this.extraHeaders);\n      request.to = this.to;\n      request.from = this.from;\n      request.call_id = this.call_id;\n      request.cseq = this.cseq;\n      request.transaction = this.transaction;\n      return request;\n    }\n  }]);\n\n  return InitialOutgoingInviteRequest;\n}(OutgoingRequest);\n\nvar IncomingMessage = /*#__PURE__*/function () {\n  function IncomingMessage() {\n    _classCallCheck(this, IncomingMessage);\n\n    this.data = null;\n    this.headers = null;\n    this.method = null;\n    this.via = null;\n    this.via_branch = null;\n    this.call_id = null;\n    this.cseq = null;\n    this.from = null;\n    this.from_tag = null;\n    this.to = null;\n    this.to_tag = null;\n    this.body = null;\n    this.sdp = null;\n  }\n  /**\n  * Insert a header of the given name and value into the last position of the\n  * header array.\n  */\n\n\n  _createClass(IncomingMessage, [{\n    key: \"addHeader\",\n    value: function addHeader(name, value) {\n      var header = {\n        raw: value\n      };\n      name = Utils.headerize(name);\n\n      if (this.headers[name]) {\n        this.headers[name].push(header);\n      } else {\n        this.headers[name] = [header];\n      }\n    }\n    /**\n     * Get the value of the given header name at the given position.\n     */\n\n  }, {\n    key: \"getHeader\",\n    value: function getHeader(name) {\n      var header = this.headers[Utils.headerize(name)];\n\n      if (header) {\n        if (header[0]) {\n          return header[0].raw;\n        }\n      } else {\n        return;\n      }\n    }\n    /**\n     * Get the header/s of the given name.\n     */\n\n  }, {\n    key: \"getHeaders\",\n    value: function getHeaders(name) {\n      var headers = this.headers[Utils.headerize(name)];\n      var result = [];\n\n      if (!headers) {\n        return [];\n      }\n\n      var _iterator7 = _createForOfIteratorHelper(headers),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var header = _step7.value;\n          result.push(header.raw);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      return result;\n    }\n    /**\n     * Verify the existence of the given header.\n     */\n\n  }, {\n    key: \"hasHeader\",\n    value: function hasHeader(name) {\n      return this.headers[Utils.headerize(name)] ? true : false;\n    }\n    /**\n    * Parse the given header on the given index.\n    * -param {String} name header name\n    * -param {Number} [idx=0] header index\n    * -returns {Object|undefined} Parsed header object, undefined if the header\n    *  is not present or in case of a parsing error.\n    */\n\n  }, {\n    key: \"parseHeader\",\n    value: function parseHeader(name) {\n      var idx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      name = Utils.headerize(name);\n\n      if (!this.headers[name]) {\n        logger.debug(\"header \\\"\".concat(name, \"\\\" not present\"));\n        return;\n      } else if (idx >= this.headers[name].length) {\n        logger.debug(\"not so many \\\"\".concat(name, \"\\\" headers present\"));\n        return;\n      }\n\n      var header = this.headers[name][idx];\n      var value = header.raw;\n\n      if (header.parsed) {\n        return header.parsed;\n      } // Substitute '-' by '_' for grammar rule matching.\n\n\n      var parsed = Grammar.parse(value, name.replace(/-/g, '_'));\n\n      if (parsed === -1) {\n        this.headers[name].splice(idx, 1); // delete from headers\n\n        logger.debug(\"error parsing \\\"\".concat(name, \"\\\" header field with value \\\"\").concat(value, \"\\\"\"));\n        return;\n      } else {\n        header.parsed = parsed;\n        return parsed;\n      }\n    }\n    /**\n     * Message Header attribute selector. Alias of parseHeader.\n     * -param {String} name header name\n     * -param {Number} [idx=0] header index\n     * -returns {Object|undefined} Parsed header object, undefined if the header\n     *  is not present or in case of a parsing error.\n     *\n     * -example\n     * message.s('via',3).port\n     */\n\n  }, {\n    key: \"s\",\n    value: function s(name, idx) {\n      return this.parseHeader(name, idx);\n    }\n    /**\n    * Replace the value of the given header by the value.\n    * -param {String} name header name\n    * -param {String} value header value\n    */\n\n  }, {\n    key: \"setHeader\",\n    value: function setHeader(name, value) {\n      var header = {\n        raw: value\n      };\n      this.headers[Utils.headerize(name)] = [header];\n    }\n    /**\n     * Parse the current body as a SDP and store the resulting object\n     * into this.sdp.\n     * -param {Boolean} force: Parse even if this.sdp already exists.\n     *\n     * Returns this.sdp.\n     */\n\n  }, {\n    key: \"parseSDP\",\n    value: function parseSDP(force) {\n      if (!force && this.sdp) {\n        return this.sdp;\n      } else {\n        this.sdp = sdp_transform.parse(this.body || '');\n        return this.sdp;\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.data;\n    }\n  }]);\n\n  return IncomingMessage;\n}();\n\nvar IncomingRequest = /*#__PURE__*/function (_IncomingMessage) {\n  _inherits(IncomingRequest, _IncomingMessage);\n\n  var _super2 = _createSuper(IncomingRequest);\n\n  function IncomingRequest(ua) {\n    var _this2;\n\n    _classCallCheck(this, IncomingRequest);\n\n    _this2 = _super2.call(this);\n    _this2.ua = ua;\n    _this2.headers = {};\n    _this2.ruri = null;\n    _this2.transport = null;\n    _this2.server_transaction = null;\n    return _this2;\n  }\n  /**\n  * Stateful reply.\n  * -param {Number} code status code\n  * -param {String} reason reason phrase\n  * -param {Object} headers extra headers\n  * -param {String} body body\n  * -param {Function} [onSuccess] onSuccess callback\n  * -param {Function} [onFailure] onFailure callback\n  */\n\n\n  _createClass(IncomingRequest, [{\n    key: \"reply\",\n    value: function reply(code, reason, extraHeaders, body, onSuccess, onFailure) {\n      var supported = [];\n      var to = this.getHeader('To');\n      code = code || null;\n      reason = reason || null; // Validate code and reason values.\n\n      if (!code || code < 100 || code > 699) {\n        throw new TypeError(\"Invalid status_code: \".concat(code));\n      } else if (reason && typeof reason !== 'string' && !(reason instanceof String)) {\n        throw new TypeError(\"Invalid reason_phrase: \".concat(reason));\n      }\n\n      reason = reason || JsSIP_C.REASON_PHRASE[code] || '';\n      extraHeaders = Utils.cloneArray(extraHeaders);\n      var response = \"SIP/2.0 \".concat(code, \" \").concat(reason, \"\\r\\n\");\n\n      if (this.method === JsSIP_C.INVITE && code > 100 && code <= 200) {\n        var headers = this.getHeaders('record-route');\n\n        var _iterator8 = _createForOfIteratorHelper(headers),\n            _step8;\n\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var header = _step8.value;\n            response += \"Record-Route: \".concat(header, \"\\r\\n\");\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n      }\n\n      var vias = this.getHeaders('via');\n\n      var _iterator9 = _createForOfIteratorHelper(vias),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var via = _step9.value;\n          response += \"Via: \".concat(via, \"\\r\\n\");\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      if (!this.to_tag && code > 100) {\n        to += \";tag=\".concat(Utils.newTag());\n      } else if (this.to_tag && !this.s('to').hasParam('tag')) {\n        to += \";tag=\".concat(this.to_tag);\n      }\n\n      response += \"To: \".concat(to, \"\\r\\n\");\n      response += \"From: \".concat(this.getHeader('From'), \"\\r\\n\");\n      response += \"Call-ID: \".concat(this.call_id, \"\\r\\n\");\n      response += \"CSeq: \".concat(this.cseq, \" \").concat(this.method, \"\\r\\n\");\n\n      var _iterator10 = _createForOfIteratorHelper(extraHeaders),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var _header2 = _step10.value;\n          response += \"\".concat(_header2.trim(), \"\\r\\n\");\n        } // Supported.\n\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n\n      switch (this.method) {\n        case JsSIP_C.INVITE:\n          if (this.ua.configuration.session_timers) {\n            supported.push('timer');\n          }\n\n          if (this.ua.contact.pub_gruu || this.ua.contact.temp_gruu) {\n            supported.push('gruu');\n          }\n\n          supported.push('ice', 'replaces');\n          break;\n\n        case JsSIP_C.UPDATE:\n          if (this.ua.configuration.session_timers) {\n            supported.push('timer');\n          }\n\n          if (body) {\n            supported.push('ice');\n          }\n\n          supported.push('replaces');\n      }\n\n      supported.push('outbound'); // Allow and Accept.\n\n      if (this.method === JsSIP_C.OPTIONS) {\n        response += \"Allow: \".concat(JsSIP_C.ALLOWED_METHODS, \"\\r\\n\");\n        response += \"Accept: \".concat(JsSIP_C.ACCEPTED_BODY_TYPES, \"\\r\\n\");\n      } else if (code === 405) {\n        response += \"Allow: \".concat(JsSIP_C.ALLOWED_METHODS, \"\\r\\n\");\n      } else if (code === 415) {\n        response += \"Accept: \".concat(JsSIP_C.ACCEPTED_BODY_TYPES, \"\\r\\n\");\n      }\n\n      response += \"Supported: \".concat(supported, \"\\r\\n\");\n\n      if (body) {\n        var length = Utils.str_utf8_length(body);\n        response += 'Content-Type: application/sdp\\r\\n';\n        response += \"Content-Length: \".concat(length, \"\\r\\n\\r\\n\");\n        response += body;\n      } else {\n        response += \"Content-Length: \".concat(0, \"\\r\\n\\r\\n\");\n      }\n\n      this.server_transaction.receiveResponse(code, response, onSuccess, onFailure);\n    }\n    /**\n    * Stateless reply.\n    * -param {Number} code status code\n    * -param {String} reason reason phrase\n    */\n\n  }, {\n    key: \"reply_sl\",\n    value: function reply_sl() {\n      var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var vias = this.getHeaders('via'); // Validate code and reason values.\n\n      if (!code || code < 100 || code > 699) {\n        throw new TypeError(\"Invalid status_code: \".concat(code));\n      } else if (reason && typeof reason !== 'string' && !(reason instanceof String)) {\n        throw new TypeError(\"Invalid reason_phrase: \".concat(reason));\n      }\n\n      reason = reason || JsSIP_C.REASON_PHRASE[code] || '';\n      var response = \"SIP/2.0 \".concat(code, \" \").concat(reason, \"\\r\\n\");\n\n      var _iterator11 = _createForOfIteratorHelper(vias),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var via = _step11.value;\n          response += \"Via: \".concat(via, \"\\r\\n\");\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n\n      var to = this.getHeader('To');\n\n      if (!this.to_tag && code > 100) {\n        to += \";tag=\".concat(Utils.newTag());\n      } else if (this.to_tag && !this.s('to').hasParam('tag')) {\n        to += \";tag=\".concat(this.to_tag);\n      }\n\n      response += \"To: \".concat(to, \"\\r\\n\");\n      response += \"From: \".concat(this.getHeader('From'), \"\\r\\n\");\n      response += \"Call-ID: \".concat(this.call_id, \"\\r\\n\");\n      response += \"CSeq: \".concat(this.cseq, \" \").concat(this.method, \"\\r\\n\");\n      response += \"Content-Length: \".concat(0, \"\\r\\n\\r\\n\");\n      this.transport.send(response);\n    }\n  }]);\n\n  return IncomingRequest;\n}(IncomingMessage);\n\nvar IncomingResponse = /*#__PURE__*/function (_IncomingMessage2) {\n  _inherits(IncomingResponse, _IncomingMessage2);\n\n  var _super3 = _createSuper(IncomingResponse);\n\n  function IncomingResponse() {\n    var _this3;\n\n    _classCallCheck(this, IncomingResponse);\n\n    _this3 = _super3.call(this);\n    _this3.headers = {};\n    _this3.status_code = null;\n    _this3.reason_phrase = null;\n    return _this3;\n  }\n\n  return IncomingResponse;\n}(IncomingMessage);\n\nmodule.exports = {\n  OutgoingRequest: OutgoingRequest,\n  InitialOutgoingInviteRequest: InitialOutgoingInviteRequest,\n  IncomingRequest: IncomingRequest,\n  IncomingResponse: IncomingResponse\n};","map":null,"metadata":{},"sourceType":"script"}