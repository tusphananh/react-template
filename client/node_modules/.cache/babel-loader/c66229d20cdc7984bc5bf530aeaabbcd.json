{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Logger = require('./Logger');\n\nvar JsSIP_C = require('./Constants');\n\nvar Registrator = require('./Registrator');\n\nvar RTCSession = require('./RTCSession');\n\nvar Message = require('./Message');\n\nvar Transactions = require('./Transactions');\n\nvar Transport = require('./Transport');\n\nvar Utils = require('./Utils');\n\nvar Exceptions = require('./Exceptions');\n\nvar URI = require('./URI');\n\nvar Parser = require('./Parser');\n\nvar SIPMessage = require('./SIPMessage');\n\nvar sanityCheck = require('./sanityCheck');\n\nvar config = require('./Config');\n\nvar logger = new Logger('UA');\nvar C = {\n  // UA status codes.\n  STATUS_INIT: 0,\n  STATUS_READY: 1,\n  STATUS_USER_CLOSED: 2,\n  STATUS_NOT_READY: 3,\n  // UA error codes.\n  CONFIGURATION_ERROR: 1,\n  NETWORK_ERROR: 2\n};\n/**\n * The User-Agent class.\n * @class JsSIP.UA\n * @param {Object} configuration Configuration parameters.\n * @throws {JsSIP.Exceptions.ConfigurationError} If a configuration parameter is invalid.\n * @throws {TypeError} If no configuration is given.\n */\n\nmodule.exports = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(UA, _EventEmitter);\n\n  var _super = _createSuper(UA);\n\n  _createClass(UA, null, [{\n    key: \"C\",\n    // Expose C object.\n    get: function get() {\n      return C;\n    }\n  }]);\n\n  function UA(configuration) {\n    var _this;\n\n    _classCallCheck(this, UA);\n\n    logger.debug('new() [configuration:%o]', configuration);\n    _this = _super.call(this);\n    _this._cache = {\n      credentials: {}\n    };\n    _this._configuration = Object.assign({}, config.settings);\n    _this._dynConfiguration = {};\n    _this._dialogs = {}; // User actions outside any session/dialog (MESSAGE).\n\n    _this._applicants = {};\n    _this._sessions = {};\n    _this._transport = null;\n    _this._contact = null;\n    _this._status = C.STATUS_INIT;\n    _this._error = null;\n    _this._transactions = {\n      nist: {},\n      nict: {},\n      ist: {},\n      ict: {}\n    }; // Custom UA empty object for high level use.\n\n    _this._data = {};\n    _this._closeTimer = null; // Check configuration argument.\n\n    if (configuration === undefined) {\n      throw new TypeError('Not enough arguments');\n    } // Load configuration.\n\n\n    try {\n      _this._loadConfig(configuration);\n    } catch (e) {\n      _this._status = C.STATUS_NOT_READY;\n      _this._error = C.CONFIGURATION_ERROR;\n      throw e;\n    } // Initialize registrator.\n\n\n    _this._registrator = new Registrator(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(UA, [{\n    key: \"start\",\n    // =================\n    //  High Level API\n    // =================\n\n    /**\n     * Connect to the server if status = STATUS_INIT.\n     * Resume UA after being closed.\n     */\n    value: function start() {\n      logger.debug('start()');\n\n      if (this._status === C.STATUS_INIT) {\n        this._transport.connect();\n      } else if (this._status === C.STATUS_USER_CLOSED) {\n        logger.debug('restarting UA'); // Disconnect.\n\n        if (this._closeTimer !== null) {\n          clearTimeout(this._closeTimer);\n          this._closeTimer = null;\n\n          this._transport.disconnect();\n        } // Reconnect.\n\n\n        this._status = C.STATUS_INIT;\n\n        this._transport.connect();\n      } else if (this._status === C.STATUS_READY) {\n        logger.debug('UA is in READY status, not restarted');\n      } else {\n        logger.debug('ERROR: connection is down, Auto-Recovery system is trying to reconnect');\n      } // Set dynamic configuration.\n\n\n      this._dynConfiguration.register = this._configuration.register;\n    }\n    /**\n     * Register.\n     */\n\n  }, {\n    key: \"register\",\n    value: function register() {\n      logger.debug('register()');\n      this._dynConfiguration.register = true;\n\n      this._registrator.register();\n    }\n    /**\n     * Unregister.\n     */\n\n  }, {\n    key: \"unregister\",\n    value: function unregister(options) {\n      logger.debug('unregister()');\n      this._dynConfiguration.register = false;\n\n      this._registrator.unregister(options);\n    }\n    /**\n     * Get the Registrator instance.\n     */\n\n  }, {\n    key: \"registrator\",\n    value: function registrator() {\n      return this._registrator;\n    }\n    /**\n     * Registration state.\n     */\n\n  }, {\n    key: \"isRegistered\",\n    value: function isRegistered() {\n      return this._registrator.registered;\n    }\n    /**\n     * Connection state.\n     */\n\n  }, {\n    key: \"isConnected\",\n    value: function isConnected() {\n      return this._transport.isConnected();\n    }\n    /**\n     * Make an outgoing call.\n     *\n     * -param {String} target\n     * -param {Object} [options]\n     *\n     * -throws {TypeError}\n     *\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(target, options) {\n      logger.debug('call()');\n      var session = new RTCSession(this);\n      session.connect(target, options);\n      return session;\n    }\n    /**\n     * Send a message.\n     *\n     * -param {String} target\n     * -param {String} body\n     * -param {Object} [options]\n     *\n     * -throws {TypeError}\n     *\n     */\n\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(target, body, options) {\n      logger.debug('sendMessage()');\n      var message = new Message(this);\n      message.send(target, body, options);\n      return message;\n    }\n    /**\n     * Terminate ongoing sessions.\n     */\n\n  }, {\n    key: \"terminateSessions\",\n    value: function terminateSessions(options) {\n      logger.debug('terminateSessions()');\n\n      for (var idx in this._sessions) {\n        if (!this._sessions[idx].isEnded()) {\n          this._sessions[idx].terminate(options);\n        }\n      }\n    }\n    /**\n     * Gracefully close.\n     *\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var _this2 = this;\n\n      logger.debug('stop()'); // Remove dynamic settings.\n\n      this._dynConfiguration = {};\n\n      if (this._status === C.STATUS_USER_CLOSED) {\n        logger.debug('UA already closed');\n        return;\n      } // Close registrator.\n\n\n      this._registrator.close(); // If there are session wait a bit so CANCEL/BYE can be sent and their responses received.\n\n\n      var num_sessions = Object.keys(this._sessions).length; // Run  _terminate_ on every Session.\n\n      for (var session in this._sessions) {\n        if (Object.prototype.hasOwnProperty.call(this._sessions, session)) {\n          logger.debug(\"closing session \".concat(session));\n\n          try {\n            this._sessions[session].terminate();\n          } catch (error) {}\n        }\n      } // Run  _close_ on every applicant.\n\n\n      for (var applicant in this._applicants) {\n        if (Object.prototype.hasOwnProperty.call(this._applicants, applicant)) try {\n          this._applicants[applicant].close();\n        } catch (error) {}\n      }\n\n      this._status = C.STATUS_USER_CLOSED;\n      var num_transactions = Object.keys(this._transactions.nict).length + Object.keys(this._transactions.nist).length + Object.keys(this._transactions.ict).length + Object.keys(this._transactions.ist).length;\n\n      if (num_transactions === 0 && num_sessions === 0) {\n        this._transport.disconnect();\n      } else {\n        this._closeTimer = setTimeout(function () {\n          _this2._closeTimer = null;\n\n          _this2._transport.disconnect();\n        }, 2000);\n      }\n    }\n    /**\n     * Normalice a string into a valid SIP request URI\n     * -param {String} target\n     * -returns {JsSIP.URI|undefined}\n     */\n\n  }, {\n    key: \"normalizeTarget\",\n    value: function normalizeTarget(target) {\n      return Utils.normalizeTarget(target, this._configuration.hostport_params);\n    }\n    /**\n     * Allow retrieving configuration and autogenerated fields in runtime.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(parameter) {\n      switch (parameter) {\n        case 'authorization_user':\n          return this._configuration.authorization_user;\n\n        case 'realm':\n          return this._configuration.realm;\n\n        case 'ha1':\n          return this._configuration.ha1;\n\n        case 'authorization_jwt':\n          return this._configuration.authorization_jwt;\n\n        default:\n          logger.warn('get() | cannot get \"%s\" parameter in runtime', parameter);\n          return undefined;\n      }\n    }\n    /**\n     * Allow configuration changes in runtime.\n     * Returns true if the parameter could be set.\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(parameter, value) {\n      switch (parameter) {\n        case 'authorization_user':\n          {\n            this._configuration.authorization_user = String(value);\n            break;\n          }\n\n        case 'password':\n          {\n            this._configuration.password = String(value);\n            break;\n          }\n\n        case 'realm':\n          {\n            this._configuration.realm = String(value);\n            break;\n          }\n\n        case 'ha1':\n          {\n            this._configuration.ha1 = String(value); // Delete the plain SIP password.\n\n            this._configuration.password = null;\n            break;\n          }\n\n        case 'authorization_jwt':\n          {\n            this._configuration.authorization_jwt = String(value);\n            break;\n          }\n\n        case 'display_name':\n          {\n            this._configuration.display_name = value;\n            break;\n          }\n\n        default:\n          logger.warn('set() | cannot set \"%s\" parameter in runtime', parameter);\n          return false;\n      }\n\n      return true;\n    } // ==========================\n    // Event Handlers.\n    // ==========================\n\n    /**\n     * new Transaction\n     */\n\n  }, {\n    key: \"newTransaction\",\n    value: function newTransaction(transaction) {\n      this._transactions[transaction.type][transaction.id] = transaction;\n      this.emit('newTransaction', {\n        transaction: transaction\n      });\n    }\n    /**\n     * Transaction destroyed.\n     */\n\n  }, {\n    key: \"destroyTransaction\",\n    value: function destroyTransaction(transaction) {\n      delete this._transactions[transaction.type][transaction.id];\n      this.emit('transactionDestroyed', {\n        transaction: transaction\n      });\n    }\n    /**\n     * new Dialog\n     */\n\n  }, {\n    key: \"newDialog\",\n    value: function newDialog(dialog) {\n      this._dialogs[dialog.id] = dialog;\n    }\n    /**\n     * Dialog destroyed.\n     */\n\n  }, {\n    key: \"destroyDialog\",\n    value: function destroyDialog(dialog) {\n      delete this._dialogs[dialog.id];\n    }\n    /**\n     *  new Message\n     */\n\n  }, {\n    key: \"newMessage\",\n    value: function newMessage(message, data) {\n      this._applicants[message] = message;\n      this.emit('newMessage', data);\n    }\n    /**\n     *  Message destroyed.\n     */\n\n  }, {\n    key: \"destroyMessage\",\n    value: function destroyMessage(message) {\n      delete this._applicants[message];\n    }\n    /**\n     * new RTCSession\n     */\n\n  }, {\n    key: \"newRTCSession\",\n    value: function newRTCSession(session, data) {\n      this._sessions[session.id] = session;\n      this.emit('newRTCSession', data);\n    }\n    /**\n     * RTCSession destroyed.\n     */\n\n  }, {\n    key: \"destroyRTCSession\",\n    value: function destroyRTCSession(session) {\n      delete this._sessions[session.id];\n    }\n    /**\n     * Registered\n     */\n\n  }, {\n    key: \"registered\",\n    value: function registered(data) {\n      this.emit('registered', data);\n    }\n    /**\n     * Unregistered\n     */\n\n  }, {\n    key: \"unregistered\",\n    value: function unregistered(data) {\n      this.emit('unregistered', data);\n    }\n    /**\n     * Registration Failed\n     */\n\n  }, {\n    key: \"registrationFailed\",\n    value: function registrationFailed(data) {\n      this.emit('registrationFailed', data);\n    } // =========================\n    // ReceiveRequest.\n    // =========================\n\n    /**\n     * Request reception\n     */\n\n  }, {\n    key: \"receiveRequest\",\n    value: function receiveRequest(request) {\n      var method = request.method; // Check that request URI points to us.\n\n      if (request.ruri.user !== this._configuration.uri.user && request.ruri.user !== this._contact.uri.user) {\n        logger.debug('Request-URI does not point to us');\n\n        if (request.method !== JsSIP_C.ACK) {\n          request.reply_sl(404);\n        }\n\n        return;\n      } // Check request URI scheme.\n\n\n      if (request.ruri.scheme === JsSIP_C.SIPS) {\n        request.reply_sl(416);\n        return;\n      } // Check transaction.\n\n\n      if (Transactions.checkTransaction(this, request)) {\n        return;\n      } // Create the server transaction.\n\n\n      if (method === JsSIP_C.INVITE) {\n        /* eslint-disable no-new */\n        new Transactions.InviteServerTransaction(this, this._transport, request);\n        /* eslint-enable no-new */\n      } else if (method !== JsSIP_C.ACK && method !== JsSIP_C.CANCEL) {\n        /* eslint-disable no-new */\n        new Transactions.NonInviteServerTransaction(this, this._transport, request);\n        /* eslint-enable no-new */\n      }\n      /* RFC3261 12.2.2\n       * Requests that do not change in any way the state of a dialog may be\n       * received within a dialog (for example, an OPTIONS request).\n       * They are processed as if they had been received outside the dialog.\n       */\n\n\n      if (method === JsSIP_C.OPTIONS) {\n        request.reply(200);\n      } else if (method === JsSIP_C.MESSAGE) {\n        if (this.listeners('newMessage').length === 0) {\n          request.reply(405);\n          return;\n        }\n\n        var message = new Message(this);\n        message.init_incoming(request);\n      } else if (method === JsSIP_C.INVITE) {\n        // Initial INVITE.\n        if (!request.to_tag && this.listeners('newRTCSession').length === 0) {\n          request.reply(405);\n          return;\n        }\n      }\n\n      var dialog;\n      var session; // Initial Request.\n\n      if (!request.to_tag) {\n        switch (method) {\n          case JsSIP_C.INVITE:\n            if (window.RTCPeerConnection) {\n              // TODO\n              if (request.hasHeader('replaces')) {\n                var replaces = request.replaces;\n                dialog = this._findDialog(replaces.call_id, replaces.from_tag, replaces.to_tag);\n\n                if (dialog) {\n                  session = dialog.owner;\n\n                  if (!session.isEnded()) {\n                    session.receiveRequest(request);\n                  } else {\n                    request.reply(603);\n                  }\n                } else {\n                  request.reply(481);\n                }\n              } else {\n                session = new RTCSession(this);\n                session.init_incoming(request);\n              }\n            } else {\n              logger.warn('INVITE received but WebRTC is not supported');\n              request.reply(488);\n            }\n\n            break;\n\n          case JsSIP_C.BYE:\n            // Out of dialog BYE received.\n            request.reply(481);\n            break;\n\n          case JsSIP_C.CANCEL:\n            session = this._findSession(request);\n\n            if (session) {\n              session.receiveRequest(request);\n            } else {\n              logger.debug('received CANCEL request for a non existent session');\n            }\n\n            break;\n\n          case JsSIP_C.ACK:\n            /* Absorb it.\n             * ACK request without a corresponding Invite Transaction\n             * and without To tag.\n             */\n            break;\n\n          case JsSIP_C.NOTIFY:\n            // Receive new sip event.\n            this.emit('sipEvent', {\n              event: request.event,\n              request: request\n            });\n            request.reply(200);\n            break;\n\n          default:\n            request.reply(405);\n            break;\n        }\n      } // In-dialog request.\n      else {\n          dialog = this._findDialog(request.call_id, request.from_tag, request.to_tag);\n\n          if (dialog) {\n            dialog.receiveRequest(request);\n          } else if (method === JsSIP_C.NOTIFY) {\n            session = this._findSession(request);\n\n            if (session) {\n              session.receiveRequest(request);\n            } else {\n              logger.debug('received NOTIFY request for a non existent subscription');\n              request.reply(481, 'Subscription does not exist');\n            }\n          }\n          /* RFC3261 12.2.2\n           * Request with to tag, but no matching dialog found.\n           * Exception: ACK for an Invite request for which a dialog has not\n           * been created.\n           */\n          else if (method !== JsSIP_C.ACK) {\n              request.reply(481);\n            }\n        }\n    } // =================\n    // Utils.\n    // =================\n\n    /**\n     * Get the session to which the request belongs to, if any.\n     */\n\n  }, {\n    key: \"_findSession\",\n    value: function _findSession(_ref) {\n      var call_id = _ref.call_id,\n          from_tag = _ref.from_tag,\n          to_tag = _ref.to_tag;\n      var sessionIDa = call_id + from_tag;\n      var sessionA = this._sessions[sessionIDa];\n      var sessionIDb = call_id + to_tag;\n      var sessionB = this._sessions[sessionIDb];\n\n      if (sessionA) {\n        return sessionA;\n      } else if (sessionB) {\n        return sessionB;\n      } else {\n        return null;\n      }\n    }\n    /**\n     * Get the dialog to which the request belongs to, if any.\n     */\n\n  }, {\n    key: \"_findDialog\",\n    value: function _findDialog(call_id, from_tag, to_tag) {\n      var id = call_id + from_tag + to_tag;\n      var dialog = this._dialogs[id];\n\n      if (dialog) {\n        return dialog;\n      } else {\n        id = call_id + to_tag + from_tag;\n        dialog = this._dialogs[id];\n\n        if (dialog) {\n          return dialog;\n        } else {\n          return null;\n        }\n      }\n    }\n  }, {\n    key: \"_loadConfig\",\n    value: function _loadConfig(configuration) {\n      // Check and load the given configuration.\n      try {\n        config.load(this._configuration, configuration);\n      } catch (e) {\n        throw e;\n      } // Post Configuration Process.\n      // Allow passing 0 number as display_name.\n\n\n      if (this._configuration.display_name === 0) {\n        this._configuration.display_name = '0';\n      } // Instance-id for GRUU.\n\n\n      if (!this._configuration.instance_id) {\n        this._configuration.instance_id = Utils.newUUID();\n      } // Jssip_id instance parameter. Static random tag of length 5.\n\n\n      this._configuration.jssip_id = Utils.createRandomToken(5); // String containing this._configuration.uri without scheme and user.\n\n      var hostport_params = this._configuration.uri.clone();\n\n      hostport_params.user = null;\n      this._configuration.hostport_params = hostport_params.toString().replace(/^sip:/i, ''); // Transport.\n\n      try {\n        this._transport = new Transport(this._configuration.sockets, {\n          // Recovery options.\n          max_interval: this._configuration.connection_recovery_max_interval,\n          min_interval: this._configuration.connection_recovery_min_interval\n        }); // Transport event callbacks.\n\n        this._transport.onconnecting = onTransportConnecting.bind(this);\n        this._transport.onconnect = onTransportConnect.bind(this);\n        this._transport.ondisconnect = onTransportDisconnect.bind(this);\n        this._transport.ondata = onTransportData.bind(this);\n      } catch (e) {\n        logger.warn(e);\n        throw new Exceptions.ConfigurationError('sockets', this._configuration.sockets);\n      } // Remove sockets instance from configuration object.\n\n\n      delete this._configuration.sockets; // Check whether authorization_user is explicitly defined.\n      // Take 'this._configuration.uri.user' value if not.\n\n      if (!this._configuration.authorization_user) {\n        this._configuration.authorization_user = this._configuration.uri.user;\n      } // If no 'registrar_server' is set use the 'uri' value without user portion and\n      // without URI params/headers.\n\n\n      if (!this._configuration.registrar_server) {\n        var registrar_server = this._configuration.uri.clone();\n\n        registrar_server.user = null;\n        registrar_server.clearParams();\n        registrar_server.clearHeaders();\n        this._configuration.registrar_server = registrar_server;\n      } // User no_answer_timeout.\n\n\n      this._configuration.no_answer_timeout *= 1000; // Via Host.\n\n      if (this._configuration.contact_uri) {\n        this._configuration.via_host = this._configuration.contact_uri.host;\n      } // Contact URI.\n      else {\n          this._configuration.contact_uri = new URI('sip', Utils.createRandomToken(8), this._configuration.via_host, null, {\n            transport: 'ws'\n          });\n        }\n\n      this._contact = {\n        pub_gruu: null,\n        temp_gruu: null,\n        uri: this._configuration.contact_uri,\n        toString: function toString() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var anonymous = options.anonymous || null;\n          var outbound = options.outbound || null;\n          var contact = '<';\n\n          if (anonymous) {\n            contact += this.temp_gruu || 'sip:anonymous@anonymous.invalid;transport=ws';\n          } else {\n            contact += this.pub_gruu || this.uri.toString();\n          }\n\n          if (outbound && (anonymous ? !this.temp_gruu : !this.pub_gruu)) {\n            contact += ';ob';\n          }\n\n          contact += '>';\n          return contact;\n        }\n      }; // Seal the configuration.\n\n      var writable_parameters = ['authorization_user', 'password', 'realm', 'ha1', 'authorization_jwt', 'display_name', 'register'];\n\n      for (var parameter in this._configuration) {\n        if (Object.prototype.hasOwnProperty.call(this._configuration, parameter)) {\n          if (writable_parameters.indexOf(parameter) !== -1) {\n            Object.defineProperty(this._configuration, parameter, {\n              writable: true,\n              configurable: false\n            });\n          } else {\n            Object.defineProperty(this._configuration, parameter, {\n              writable: false,\n              configurable: false\n            });\n          }\n        }\n      }\n\n      logger.debug('configuration parameters after validation:');\n\n      for (var _parameter in this._configuration) {\n        // Only show the user user configurable parameters.\n        if (Object.prototype.hasOwnProperty.call(config.settings, _parameter)) {\n          switch (_parameter) {\n            case 'uri':\n            case 'registrar_server':\n              logger.debug(\"- \".concat(_parameter, \": \").concat(this._configuration[_parameter]));\n              break;\n\n            case 'password':\n            case 'ha1':\n            case 'authorization_jwt':\n              logger.debug(\"- \".concat(_parameter, \": NOT SHOWN\"));\n              break;\n\n            default:\n              logger.debug(\"- \".concat(_parameter, \": \").concat(JSON.stringify(this._configuration[_parameter])));\n          }\n        }\n      }\n\n      return;\n    }\n  }, {\n    key: \"C\",\n    get: function get() {\n      return C;\n    }\n  }, {\n    key: \"status\",\n    get: function get() {\n      return this._status;\n    }\n  }, {\n    key: \"contact\",\n    get: function get() {\n      return this._contact;\n    }\n  }, {\n    key: \"configuration\",\n    get: function get() {\n      return this._configuration;\n    }\n  }, {\n    key: \"transport\",\n    get: function get() {\n      return this._transport;\n    }\n  }]);\n\n  return UA;\n}(EventEmitter);\n/**\n * Transport event handlers\n */\n// Transport connecting event.\n\n\nfunction onTransportConnecting(data) {\n  this.emit('connecting', data);\n} // Transport connected event.\n\n\nfunction onTransportConnect(data) {\n  if (this._status === C.STATUS_USER_CLOSED) {\n    return;\n  }\n\n  this._status = C.STATUS_READY;\n  this._error = null;\n  this.emit('connected', data);\n\n  if (this._dynConfiguration.register) {\n    this._registrator.register();\n  }\n} // Transport disconnected event.\n\n\nfunction onTransportDisconnect(data) {\n  // Run _onTransportError_ callback on every client transaction using _transport_.\n  var client_transactions = ['nict', 'ict', 'nist', 'ist'];\n\n  for (var _i = 0, _client_transactions = client_transactions; _i < _client_transactions.length; _i++) {\n    var type = _client_transactions[_i];\n\n    for (var id in this._transactions[type]) {\n      if (Object.prototype.hasOwnProperty.call(this._transactions[type], id)) {\n        this._transactions[type][id].onTransportError();\n      }\n    }\n  }\n\n  this.emit('disconnected', data); // Call registrator _onTransportClosed_.\n\n  this._registrator.onTransportClosed();\n\n  if (this._status !== C.STATUS_USER_CLOSED) {\n    this._status = C.STATUS_NOT_READY;\n    this._error = C.NETWORK_ERROR;\n  }\n} // Transport data event.\n\n\nfunction onTransportData(data) {\n  var transport = data.transport;\n  var message = data.message;\n  message = Parser.parseMessage(message, this);\n\n  if (!message) {\n    return;\n  }\n\n  if (this._status === C.STATUS_USER_CLOSED && message instanceof SIPMessage.IncomingRequest) {\n    return;\n  } // Do some sanity check.\n\n\n  if (!sanityCheck(message, this, transport)) {\n    return;\n  }\n\n  if (message instanceof SIPMessage.IncomingRequest) {\n    message.transport = transport;\n    this.receiveRequest(message);\n  } else if (message instanceof SIPMessage.IncomingResponse) {\n    /* Unike stated in 18.1.2, if a response does not match\n    * any transaction, it is discarded here and no passed to the core\n    * in order to be discarded there.\n    */\n    var transaction;\n\n    switch (message.method) {\n      case JsSIP_C.INVITE:\n        transaction = this._transactions.ict[message.via_branch];\n\n        if (transaction) {\n          transaction.receiveResponse(message);\n        }\n\n        break;\n\n      case JsSIP_C.ACK:\n        // Just in case ;-).\n        break;\n\n      default:\n        transaction = this._transactions.nict[message.via_branch];\n\n        if (transaction) {\n          transaction.receiveResponse(message);\n        }\n\n        break;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/tuphan/Desktop/gcallstest/node_modules/jssip/lib-es5/UA.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","_inherits","subClass","superClass","create","value","_setPrototypeOf","o","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf","result","NewTarget","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","call","_assertThisInitialized","ReferenceError","sham","Proxy","Date","toString","e","getPrototypeOf","EventEmitter","require","Logger","JsSIP_C","Registrator","RTCSession","Message","Transactions","Transport","Utils","Exceptions","URI","Parser","SIPMessage","sanityCheck","config","logger","C","STATUS_INIT","STATUS_READY","STATUS_USER_CLOSED","STATUS_NOT_READY","CONFIGURATION_ERROR","NETWORK_ERROR","module","exports","_EventEmitter","UA","_super","get","configuration","_this","debug","_cache","credentials","_configuration","assign","settings","_dynConfiguration","_dialogs","_applicants","_sessions","_transport","_contact","_status","_error","_transactions","nist","nict","ist","ict","_data","_closeTimer","undefined","_loadConfig","_registrator","start","connect","clearTimeout","disconnect","register","unregister","options","registrator","isRegistered","registered","isConnected","session","sendMessage","body","message","send","terminateSessions","idx","isEnded","terminate","stop","_this2","close","num_sessions","keys","hasOwnProperty","concat","error","applicant","num_transactions","setTimeout","normalizeTarget","hostport_params","parameter","authorization_user","realm","ha1","authorization_jwt","warn","set","String","password","display_name","newTransaction","transaction","type","id","emit","destroyTransaction","newDialog","dialog","destroyDialog","newMessage","data","destroyMessage","newRTCSession","destroyRTCSession","unregistered","registrationFailed","receiveRequest","request","method","ruri","user","uri","ACK","reply_sl","scheme","SIPS","checkTransaction","INVITE","InviteServerTransaction","CANCEL","NonInviteServerTransaction","OPTIONS","reply","MESSAGE","listeners","init_incoming","to_tag","window","RTCPeerConnection","hasHeader","replaces","_findDialog","call_id","from_tag","owner","BYE","_findSession","NOTIFY","event","_ref","sessionIDa","sessionA","sessionIDb","sessionB","load","instance_id","newUUID","jssip_id","createRandomToken","clone","replace","sockets","max_interval","connection_recovery_max_interval","min_interval","connection_recovery_min_interval","onconnecting","onTransportConnecting","bind","onconnect","onTransportConnect","ondisconnect","onTransportDisconnect","ondata","onTransportData","ConfigurationError","registrar_server","clearParams","clearHeaders","no_answer_timeout","contact_uri","via_host","host","transport","pub_gruu","temp_gruu","anonymous","outbound","contact","writable_parameters","indexOf","_parameter","JSON","stringify","client_transactions","_i","_client_transactions","onTransportError","onTransportClosed","parseMessage","IncomingRequest","IncomingResponse","via_branch","receiveResponse"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Logger = require('./Logger');\n\nvar JsSIP_C = require('./Constants');\n\nvar Registrator = require('./Registrator');\n\nvar RTCSession = require('./RTCSession');\n\nvar Message = require('./Message');\n\nvar Transactions = require('./Transactions');\n\nvar Transport = require('./Transport');\n\nvar Utils = require('./Utils');\n\nvar Exceptions = require('./Exceptions');\n\nvar URI = require('./URI');\n\nvar Parser = require('./Parser');\n\nvar SIPMessage = require('./SIPMessage');\n\nvar sanityCheck = require('./sanityCheck');\n\nvar config = require('./Config');\n\nvar logger = new Logger('UA');\nvar C = {\n  // UA status codes.\n  STATUS_INIT: 0,\n  STATUS_READY: 1,\n  STATUS_USER_CLOSED: 2,\n  STATUS_NOT_READY: 3,\n  // UA error codes.\n  CONFIGURATION_ERROR: 1,\n  NETWORK_ERROR: 2\n};\n/**\n * The User-Agent class.\n * @class JsSIP.UA\n * @param {Object} configuration Configuration parameters.\n * @throws {JsSIP.Exceptions.ConfigurationError} If a configuration parameter is invalid.\n * @throws {TypeError} If no configuration is given.\n */\n\nmodule.exports = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(UA, _EventEmitter);\n\n  var _super = _createSuper(UA);\n\n  _createClass(UA, null, [{\n    key: \"C\",\n    // Expose C object.\n    get: function get() {\n      return C;\n    }\n  }]);\n\n  function UA(configuration) {\n    var _this;\n\n    _classCallCheck(this, UA);\n\n    logger.debug('new() [configuration:%o]', configuration);\n    _this = _super.call(this);\n    _this._cache = {\n      credentials: {}\n    };\n    _this._configuration = Object.assign({}, config.settings);\n    _this._dynConfiguration = {};\n    _this._dialogs = {}; // User actions outside any session/dialog (MESSAGE).\n\n    _this._applicants = {};\n    _this._sessions = {};\n    _this._transport = null;\n    _this._contact = null;\n    _this._status = C.STATUS_INIT;\n    _this._error = null;\n    _this._transactions = {\n      nist: {},\n      nict: {},\n      ist: {},\n      ict: {}\n    }; // Custom UA empty object for high level use.\n\n    _this._data = {};\n    _this._closeTimer = null; // Check configuration argument.\n\n    if (configuration === undefined) {\n      throw new TypeError('Not enough arguments');\n    } // Load configuration.\n\n\n    try {\n      _this._loadConfig(configuration);\n    } catch (e) {\n      _this._status = C.STATUS_NOT_READY;\n      _this._error = C.CONFIGURATION_ERROR;\n      throw e;\n    } // Initialize registrator.\n\n\n    _this._registrator = new Registrator(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(UA, [{\n    key: \"start\",\n    // =================\n    //  High Level API\n    // =================\n\n    /**\n     * Connect to the server if status = STATUS_INIT.\n     * Resume UA after being closed.\n     */\n    value: function start() {\n      logger.debug('start()');\n\n      if (this._status === C.STATUS_INIT) {\n        this._transport.connect();\n      } else if (this._status === C.STATUS_USER_CLOSED) {\n        logger.debug('restarting UA'); // Disconnect.\n\n        if (this._closeTimer !== null) {\n          clearTimeout(this._closeTimer);\n          this._closeTimer = null;\n\n          this._transport.disconnect();\n        } // Reconnect.\n\n\n        this._status = C.STATUS_INIT;\n\n        this._transport.connect();\n      } else if (this._status === C.STATUS_READY) {\n        logger.debug('UA is in READY status, not restarted');\n      } else {\n        logger.debug('ERROR: connection is down, Auto-Recovery system is trying to reconnect');\n      } // Set dynamic configuration.\n\n\n      this._dynConfiguration.register = this._configuration.register;\n    }\n    /**\n     * Register.\n     */\n\n  }, {\n    key: \"register\",\n    value: function register() {\n      logger.debug('register()');\n      this._dynConfiguration.register = true;\n\n      this._registrator.register();\n    }\n    /**\n     * Unregister.\n     */\n\n  }, {\n    key: \"unregister\",\n    value: function unregister(options) {\n      logger.debug('unregister()');\n      this._dynConfiguration.register = false;\n\n      this._registrator.unregister(options);\n    }\n    /**\n     * Get the Registrator instance.\n     */\n\n  }, {\n    key: \"registrator\",\n    value: function registrator() {\n      return this._registrator;\n    }\n    /**\n     * Registration state.\n     */\n\n  }, {\n    key: \"isRegistered\",\n    value: function isRegistered() {\n      return this._registrator.registered;\n    }\n    /**\n     * Connection state.\n     */\n\n  }, {\n    key: \"isConnected\",\n    value: function isConnected() {\n      return this._transport.isConnected();\n    }\n    /**\n     * Make an outgoing call.\n     *\n     * -param {String} target\n     * -param {Object} [options]\n     *\n     * -throws {TypeError}\n     *\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(target, options) {\n      logger.debug('call()');\n      var session = new RTCSession(this);\n      session.connect(target, options);\n      return session;\n    }\n    /**\n     * Send a message.\n     *\n     * -param {String} target\n     * -param {String} body\n     * -param {Object} [options]\n     *\n     * -throws {TypeError}\n     *\n     */\n\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(target, body, options) {\n      logger.debug('sendMessage()');\n      var message = new Message(this);\n      message.send(target, body, options);\n      return message;\n    }\n    /**\n     * Terminate ongoing sessions.\n     */\n\n  }, {\n    key: \"terminateSessions\",\n    value: function terminateSessions(options) {\n      logger.debug('terminateSessions()');\n\n      for (var idx in this._sessions) {\n        if (!this._sessions[idx].isEnded()) {\n          this._sessions[idx].terminate(options);\n        }\n      }\n    }\n    /**\n     * Gracefully close.\n     *\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var _this2 = this;\n\n      logger.debug('stop()'); // Remove dynamic settings.\n\n      this._dynConfiguration = {};\n\n      if (this._status === C.STATUS_USER_CLOSED) {\n        logger.debug('UA already closed');\n        return;\n      } // Close registrator.\n\n\n      this._registrator.close(); // If there are session wait a bit so CANCEL/BYE can be sent and their responses received.\n\n\n      var num_sessions = Object.keys(this._sessions).length; // Run  _terminate_ on every Session.\n\n      for (var session in this._sessions) {\n        if (Object.prototype.hasOwnProperty.call(this._sessions, session)) {\n          logger.debug(\"closing session \".concat(session));\n\n          try {\n            this._sessions[session].terminate();\n          } catch (error) {}\n        }\n      } // Run  _close_ on every applicant.\n\n\n      for (var applicant in this._applicants) {\n        if (Object.prototype.hasOwnProperty.call(this._applicants, applicant)) try {\n          this._applicants[applicant].close();\n        } catch (error) {}\n      }\n\n      this._status = C.STATUS_USER_CLOSED;\n      var num_transactions = Object.keys(this._transactions.nict).length + Object.keys(this._transactions.nist).length + Object.keys(this._transactions.ict).length + Object.keys(this._transactions.ist).length;\n\n      if (num_transactions === 0 && num_sessions === 0) {\n        this._transport.disconnect();\n      } else {\n        this._closeTimer = setTimeout(function () {\n          _this2._closeTimer = null;\n\n          _this2._transport.disconnect();\n        }, 2000);\n      }\n    }\n    /**\n     * Normalice a string into a valid SIP request URI\n     * -param {String} target\n     * -returns {JsSIP.URI|undefined}\n     */\n\n  }, {\n    key: \"normalizeTarget\",\n    value: function normalizeTarget(target) {\n      return Utils.normalizeTarget(target, this._configuration.hostport_params);\n    }\n    /**\n     * Allow retrieving configuration and autogenerated fields in runtime.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(parameter) {\n      switch (parameter) {\n        case 'authorization_user':\n          return this._configuration.authorization_user;\n\n        case 'realm':\n          return this._configuration.realm;\n\n        case 'ha1':\n          return this._configuration.ha1;\n\n        case 'authorization_jwt':\n          return this._configuration.authorization_jwt;\n\n        default:\n          logger.warn('get() | cannot get \"%s\" parameter in runtime', parameter);\n          return undefined;\n      }\n    }\n    /**\n     * Allow configuration changes in runtime.\n     * Returns true if the parameter could be set.\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(parameter, value) {\n      switch (parameter) {\n        case 'authorization_user':\n          {\n            this._configuration.authorization_user = String(value);\n            break;\n          }\n\n        case 'password':\n          {\n            this._configuration.password = String(value);\n            break;\n          }\n\n        case 'realm':\n          {\n            this._configuration.realm = String(value);\n            break;\n          }\n\n        case 'ha1':\n          {\n            this._configuration.ha1 = String(value); // Delete the plain SIP password.\n\n            this._configuration.password = null;\n            break;\n          }\n\n        case 'authorization_jwt':\n          {\n            this._configuration.authorization_jwt = String(value);\n            break;\n          }\n\n        case 'display_name':\n          {\n            this._configuration.display_name = value;\n            break;\n          }\n\n        default:\n          logger.warn('set() | cannot set \"%s\" parameter in runtime', parameter);\n          return false;\n      }\n\n      return true;\n    } // ==========================\n    // Event Handlers.\n    // ==========================\n\n    /**\n     * new Transaction\n     */\n\n  }, {\n    key: \"newTransaction\",\n    value: function newTransaction(transaction) {\n      this._transactions[transaction.type][transaction.id] = transaction;\n      this.emit('newTransaction', {\n        transaction: transaction\n      });\n    }\n    /**\n     * Transaction destroyed.\n     */\n\n  }, {\n    key: \"destroyTransaction\",\n    value: function destroyTransaction(transaction) {\n      delete this._transactions[transaction.type][transaction.id];\n      this.emit('transactionDestroyed', {\n        transaction: transaction\n      });\n    }\n    /**\n     * new Dialog\n     */\n\n  }, {\n    key: \"newDialog\",\n    value: function newDialog(dialog) {\n      this._dialogs[dialog.id] = dialog;\n    }\n    /**\n     * Dialog destroyed.\n     */\n\n  }, {\n    key: \"destroyDialog\",\n    value: function destroyDialog(dialog) {\n      delete this._dialogs[dialog.id];\n    }\n    /**\n     *  new Message\n     */\n\n  }, {\n    key: \"newMessage\",\n    value: function newMessage(message, data) {\n      this._applicants[message] = message;\n      this.emit('newMessage', data);\n    }\n    /**\n     *  Message destroyed.\n     */\n\n  }, {\n    key: \"destroyMessage\",\n    value: function destroyMessage(message) {\n      delete this._applicants[message];\n    }\n    /**\n     * new RTCSession\n     */\n\n  }, {\n    key: \"newRTCSession\",\n    value: function newRTCSession(session, data) {\n      this._sessions[session.id] = session;\n      this.emit('newRTCSession', data);\n    }\n    /**\n     * RTCSession destroyed.\n     */\n\n  }, {\n    key: \"destroyRTCSession\",\n    value: function destroyRTCSession(session) {\n      delete this._sessions[session.id];\n    }\n    /**\n     * Registered\n     */\n\n  }, {\n    key: \"registered\",\n    value: function registered(data) {\n      this.emit('registered', data);\n    }\n    /**\n     * Unregistered\n     */\n\n  }, {\n    key: \"unregistered\",\n    value: function unregistered(data) {\n      this.emit('unregistered', data);\n    }\n    /**\n     * Registration Failed\n     */\n\n  }, {\n    key: \"registrationFailed\",\n    value: function registrationFailed(data) {\n      this.emit('registrationFailed', data);\n    } // =========================\n    // ReceiveRequest.\n    // =========================\n\n    /**\n     * Request reception\n     */\n\n  }, {\n    key: \"receiveRequest\",\n    value: function receiveRequest(request) {\n      var method = request.method; // Check that request URI points to us.\n\n      if (request.ruri.user !== this._configuration.uri.user && request.ruri.user !== this._contact.uri.user) {\n        logger.debug('Request-URI does not point to us');\n\n        if (request.method !== JsSIP_C.ACK) {\n          request.reply_sl(404);\n        }\n\n        return;\n      } // Check request URI scheme.\n\n\n      if (request.ruri.scheme === JsSIP_C.SIPS) {\n        request.reply_sl(416);\n        return;\n      } // Check transaction.\n\n\n      if (Transactions.checkTransaction(this, request)) {\n        return;\n      } // Create the server transaction.\n\n\n      if (method === JsSIP_C.INVITE) {\n        /* eslint-disable no-new */\n        new Transactions.InviteServerTransaction(this, this._transport, request);\n        /* eslint-enable no-new */\n      } else if (method !== JsSIP_C.ACK && method !== JsSIP_C.CANCEL) {\n        /* eslint-disable no-new */\n        new Transactions.NonInviteServerTransaction(this, this._transport, request);\n        /* eslint-enable no-new */\n      }\n      /* RFC3261 12.2.2\n       * Requests that do not change in any way the state of a dialog may be\n       * received within a dialog (for example, an OPTIONS request).\n       * They are processed as if they had been received outside the dialog.\n       */\n\n\n      if (method === JsSIP_C.OPTIONS) {\n        request.reply(200);\n      } else if (method === JsSIP_C.MESSAGE) {\n        if (this.listeners('newMessage').length === 0) {\n          request.reply(405);\n          return;\n        }\n\n        var message = new Message(this);\n        message.init_incoming(request);\n      } else if (method === JsSIP_C.INVITE) {\n        // Initial INVITE.\n        if (!request.to_tag && this.listeners('newRTCSession').length === 0) {\n          request.reply(405);\n          return;\n        }\n      }\n\n      var dialog;\n      var session; // Initial Request.\n\n      if (!request.to_tag) {\n        switch (method) {\n          case JsSIP_C.INVITE:\n            if (window.RTCPeerConnection) {\n              // TODO\n              if (request.hasHeader('replaces')) {\n                var replaces = request.replaces;\n                dialog = this._findDialog(replaces.call_id, replaces.from_tag, replaces.to_tag);\n\n                if (dialog) {\n                  session = dialog.owner;\n\n                  if (!session.isEnded()) {\n                    session.receiveRequest(request);\n                  } else {\n                    request.reply(603);\n                  }\n                } else {\n                  request.reply(481);\n                }\n              } else {\n                session = new RTCSession(this);\n                session.init_incoming(request);\n              }\n            } else {\n              logger.warn('INVITE received but WebRTC is not supported');\n              request.reply(488);\n            }\n\n            break;\n\n          case JsSIP_C.BYE:\n            // Out of dialog BYE received.\n            request.reply(481);\n            break;\n\n          case JsSIP_C.CANCEL:\n            session = this._findSession(request);\n\n            if (session) {\n              session.receiveRequest(request);\n            } else {\n              logger.debug('received CANCEL request for a non existent session');\n            }\n\n            break;\n\n          case JsSIP_C.ACK:\n            /* Absorb it.\n             * ACK request without a corresponding Invite Transaction\n             * and without To tag.\n             */\n            break;\n\n          case JsSIP_C.NOTIFY:\n            // Receive new sip event.\n            this.emit('sipEvent', {\n              event: request.event,\n              request: request\n            });\n            request.reply(200);\n            break;\n\n          default:\n            request.reply(405);\n            break;\n        }\n      } // In-dialog request.\n      else {\n          dialog = this._findDialog(request.call_id, request.from_tag, request.to_tag);\n\n          if (dialog) {\n            dialog.receiveRequest(request);\n          } else if (method === JsSIP_C.NOTIFY) {\n            session = this._findSession(request);\n\n            if (session) {\n              session.receiveRequest(request);\n            } else {\n              logger.debug('received NOTIFY request for a non existent subscription');\n              request.reply(481, 'Subscription does not exist');\n            }\n          }\n          /* RFC3261 12.2.2\n           * Request with to tag, but no matching dialog found.\n           * Exception: ACK for an Invite request for which a dialog has not\n           * been created.\n           */\n          else if (method !== JsSIP_C.ACK) {\n              request.reply(481);\n            }\n        }\n    } // =================\n    // Utils.\n    // =================\n\n    /**\n     * Get the session to which the request belongs to, if any.\n     */\n\n  }, {\n    key: \"_findSession\",\n    value: function _findSession(_ref) {\n      var call_id = _ref.call_id,\n          from_tag = _ref.from_tag,\n          to_tag = _ref.to_tag;\n      var sessionIDa = call_id + from_tag;\n      var sessionA = this._sessions[sessionIDa];\n      var sessionIDb = call_id + to_tag;\n      var sessionB = this._sessions[sessionIDb];\n\n      if (sessionA) {\n        return sessionA;\n      } else if (sessionB) {\n        return sessionB;\n      } else {\n        return null;\n      }\n    }\n    /**\n     * Get the dialog to which the request belongs to, if any.\n     */\n\n  }, {\n    key: \"_findDialog\",\n    value: function _findDialog(call_id, from_tag, to_tag) {\n      var id = call_id + from_tag + to_tag;\n      var dialog = this._dialogs[id];\n\n      if (dialog) {\n        return dialog;\n      } else {\n        id = call_id + to_tag + from_tag;\n        dialog = this._dialogs[id];\n\n        if (dialog) {\n          return dialog;\n        } else {\n          return null;\n        }\n      }\n    }\n  }, {\n    key: \"_loadConfig\",\n    value: function _loadConfig(configuration) {\n      // Check and load the given configuration.\n      try {\n        config.load(this._configuration, configuration);\n      } catch (e) {\n        throw e;\n      } // Post Configuration Process.\n      // Allow passing 0 number as display_name.\n\n\n      if (this._configuration.display_name === 0) {\n        this._configuration.display_name = '0';\n      } // Instance-id for GRUU.\n\n\n      if (!this._configuration.instance_id) {\n        this._configuration.instance_id = Utils.newUUID();\n      } // Jssip_id instance parameter. Static random tag of length 5.\n\n\n      this._configuration.jssip_id = Utils.createRandomToken(5); // String containing this._configuration.uri without scheme and user.\n\n      var hostport_params = this._configuration.uri.clone();\n\n      hostport_params.user = null;\n      this._configuration.hostport_params = hostport_params.toString().replace(/^sip:/i, ''); // Transport.\n\n      try {\n        this._transport = new Transport(this._configuration.sockets, {\n          // Recovery options.\n          max_interval: this._configuration.connection_recovery_max_interval,\n          min_interval: this._configuration.connection_recovery_min_interval\n        }); // Transport event callbacks.\n\n        this._transport.onconnecting = onTransportConnecting.bind(this);\n        this._transport.onconnect = onTransportConnect.bind(this);\n        this._transport.ondisconnect = onTransportDisconnect.bind(this);\n        this._transport.ondata = onTransportData.bind(this);\n      } catch (e) {\n        logger.warn(e);\n        throw new Exceptions.ConfigurationError('sockets', this._configuration.sockets);\n      } // Remove sockets instance from configuration object.\n\n\n      delete this._configuration.sockets; // Check whether authorization_user is explicitly defined.\n      // Take 'this._configuration.uri.user' value if not.\n\n      if (!this._configuration.authorization_user) {\n        this._configuration.authorization_user = this._configuration.uri.user;\n      } // If no 'registrar_server' is set use the 'uri' value without user portion and\n      // without URI params/headers.\n\n\n      if (!this._configuration.registrar_server) {\n        var registrar_server = this._configuration.uri.clone();\n\n        registrar_server.user = null;\n        registrar_server.clearParams();\n        registrar_server.clearHeaders();\n        this._configuration.registrar_server = registrar_server;\n      } // User no_answer_timeout.\n\n\n      this._configuration.no_answer_timeout *= 1000; // Via Host.\n\n      if (this._configuration.contact_uri) {\n        this._configuration.via_host = this._configuration.contact_uri.host;\n      } // Contact URI.\n      else {\n          this._configuration.contact_uri = new URI('sip', Utils.createRandomToken(8), this._configuration.via_host, null, {\n            transport: 'ws'\n          });\n        }\n\n      this._contact = {\n        pub_gruu: null,\n        temp_gruu: null,\n        uri: this._configuration.contact_uri,\n        toString: function toString() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var anonymous = options.anonymous || null;\n          var outbound = options.outbound || null;\n          var contact = '<';\n\n          if (anonymous) {\n            contact += this.temp_gruu || 'sip:anonymous@anonymous.invalid;transport=ws';\n          } else {\n            contact += this.pub_gruu || this.uri.toString();\n          }\n\n          if (outbound && (anonymous ? !this.temp_gruu : !this.pub_gruu)) {\n            contact += ';ob';\n          }\n\n          contact += '>';\n          return contact;\n        }\n      }; // Seal the configuration.\n\n      var writable_parameters = ['authorization_user', 'password', 'realm', 'ha1', 'authorization_jwt', 'display_name', 'register'];\n\n      for (var parameter in this._configuration) {\n        if (Object.prototype.hasOwnProperty.call(this._configuration, parameter)) {\n          if (writable_parameters.indexOf(parameter) !== -1) {\n            Object.defineProperty(this._configuration, parameter, {\n              writable: true,\n              configurable: false\n            });\n          } else {\n            Object.defineProperty(this._configuration, parameter, {\n              writable: false,\n              configurable: false\n            });\n          }\n        }\n      }\n\n      logger.debug('configuration parameters after validation:');\n\n      for (var _parameter in this._configuration) {\n        // Only show the user user configurable parameters.\n        if (Object.prototype.hasOwnProperty.call(config.settings, _parameter)) {\n          switch (_parameter) {\n            case 'uri':\n            case 'registrar_server':\n              logger.debug(\"- \".concat(_parameter, \": \").concat(this._configuration[_parameter]));\n              break;\n\n            case 'password':\n            case 'ha1':\n            case 'authorization_jwt':\n              logger.debug(\"- \".concat(_parameter, \": NOT SHOWN\"));\n              break;\n\n            default:\n              logger.debug(\"- \".concat(_parameter, \": \").concat(JSON.stringify(this._configuration[_parameter])));\n          }\n        }\n      }\n\n      return;\n    }\n  }, {\n    key: \"C\",\n    get: function get() {\n      return C;\n    }\n  }, {\n    key: \"status\",\n    get: function get() {\n      return this._status;\n    }\n  }, {\n    key: \"contact\",\n    get: function get() {\n      return this._contact;\n    }\n  }, {\n    key: \"configuration\",\n    get: function get() {\n      return this._configuration;\n    }\n  }, {\n    key: \"transport\",\n    get: function get() {\n      return this._transport;\n    }\n  }]);\n\n  return UA;\n}(EventEmitter);\n/**\n * Transport event handlers\n */\n// Transport connecting event.\n\n\nfunction onTransportConnecting(data) {\n  this.emit('connecting', data);\n} // Transport connected event.\n\n\nfunction onTransportConnect(data) {\n  if (this._status === C.STATUS_USER_CLOSED) {\n    return;\n  }\n\n  this._status = C.STATUS_READY;\n  this._error = null;\n  this.emit('connected', data);\n\n  if (this._dynConfiguration.register) {\n    this._registrator.register();\n  }\n} // Transport disconnected event.\n\n\nfunction onTransportDisconnect(data) {\n  // Run _onTransportError_ callback on every client transaction using _transport_.\n  var client_transactions = ['nict', 'ict', 'nist', 'ist'];\n\n  for (var _i = 0, _client_transactions = client_transactions; _i < _client_transactions.length; _i++) {\n    var type = _client_transactions[_i];\n\n    for (var id in this._transactions[type]) {\n      if (Object.prototype.hasOwnProperty.call(this._transactions[type], id)) {\n        this._transactions[type][id].onTransportError();\n      }\n    }\n  }\n\n  this.emit('disconnected', data); // Call registrator _onTransportClosed_.\n\n  this._registrator.onTransportClosed();\n\n  if (this._status !== C.STATUS_USER_CLOSED) {\n    this._status = C.STATUS_NOT_READY;\n    this._error = C.NETWORK_ERROR;\n  }\n} // Transport data event.\n\n\nfunction onTransportData(data) {\n  var transport = data.transport;\n  var message = data.message;\n  message = Parser.parseMessage(message, this);\n\n  if (!message) {\n    return;\n  }\n\n  if (this._status === C.STATUS_USER_CLOSED && message instanceof SIPMessage.IncomingRequest) {\n    return;\n  } // Do some sanity check.\n\n\n  if (!sanityCheck(message, this, transport)) {\n    return;\n  }\n\n  if (message instanceof SIPMessage.IncomingRequest) {\n    message.transport = transport;\n    this.receiveRequest(message);\n  } else if (message instanceof SIPMessage.IncomingResponse) {\n    /* Unike stated in 18.1.2, if a response does not match\n    * any transaction, it is discarded here and no passed to the core\n    * in order to be discarded there.\n    */\n    var transaction;\n\n    switch (message.method) {\n      case JsSIP_C.INVITE:\n        transaction = this._transactions.ict[message.via_branch];\n\n        if (transaction) {\n          transaction.receiveResponse(message);\n        }\n\n        break;\n\n      case JsSIP_C.ACK:\n        // Just in case ;-).\n        break;\n\n      default:\n        transaction = this._transactions.nict[message.via_branch];\n\n        if (transaction) {\n          transaction.receiveResponse(message);\n        }\n\n        break;\n    }\n  }\n}"]},"metadata":{},"sourceType":"script"}